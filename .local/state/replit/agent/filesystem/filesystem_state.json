{"file_contents":{"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/chapter-view.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { PolaroidCard } from \"@/components/PolaroidCard\";\nimport type { Section, Chapter } from \"@shared/schema\";\n\nexport default function ChapterView() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n\n  const { data: chapter } = useQuery<Chapter>({\n    queryKey: [`/api/chapters/${id}`],\n  });\n\n  const { data: sections = [] } = useQuery<Section[]>({\n    queryKey: [`/api/chapters/${id}/sections`],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-kdrama-sakura/10 via-kdrama-cream/30 to-kdrama-lavender/10\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8 flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div>\n            <h1 className=\"font-myeongjo text-4xl text-kdrama-ink\">\n              {chapter?.title || \"Loading...\"}\n            </h1>\n            {chapter?.description && (\n              <p className=\"font-noto text-muted-foreground mt-2\">\n                {chapter.description}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {sections.map((section) => (\n            <PolaroidCard\n              key={section.id}\n              title={section.title}\n              mood={section.mood || undefined}\n              tags={section.tags || undefined}\n              coverUrl={section.thumbnail || undefined}\n              onClick={() => setLocation(`/read/${section.id}`)}\n            />\n          ))}\n        </div>\n\n        {sections.length === 0 && (\n          <div className=\"text-center py-16\">\n            <p className=\"font-noto text-muted-foreground text-lg\">\n              No sections in this chapter yet.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2192},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ChapterNav.tsx":{"content":"import { ChevronRight } from \"lucide-react\";\nimport { Knot } from \"./Knot\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface Chapter {\n  id: string;\n  title: string;\n  emoji?: string;\n  order: number;\n  isPublic: boolean;\n  pageCount?: number;\n}\n\ninterface ChapterNavProps {\n  chapters: Chapter[];\n  activeChapterId?: string;\n  onChapterClick?: (chapterId: string) => void;\n}\n\nexport function ChapterNav({ chapters, activeChapterId, onChapterClick }: ChapterNavProps) {\n  return (\n    <div className=\"space-y-2\">\n      {chapters.map((chapter, index) => (\n        <div key={chapter.id}>\n          {index > 0 && (\n            <div className=\"flex items-center justify-center py-2\">\n              <Knot size=\"sm\" tone=\"muted\" />\n            </div>\n          )}\n          <Card\n            className={`p-4 hover-elevate cursor-pointer transition-all duration-180 ${\n              activeChapterId === chapter.id\n                ? \"bg-kdrama-sakura/10 dark:bg-kdrama-sakura/5 border-kdrama-thread\"\n                : \"\"\n            }`}\n            onClick={() => onChapterClick?.(chapter.id)}\n            data-testid={`card-chapter-${chapter.id}`}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                {chapter.emoji && (\n                  <span className=\"text-2xl\" role=\"img\" aria-label=\"chapter emoji\">\n                    {chapter.emoji}\n                  </span>\n                )}\n                <div>\n                  <h3 className=\"font-myeongjo font-bold text-kdrama-ink dark:text-foreground\">\n                    {chapter.title}\n                  </h3>\n                  {chapter.pageCount !== undefined && (\n                    <p className=\"font-noto text-xs text-muted-foreground\">\n                      {chapter.pageCount} {chapter.pageCount === 1 ? \"page\" : \"pages\"}\n                    </p>\n                  )}\n                </div>\n              </div>\n              <ChevronRight className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2121},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { PrivateRoute } from \"@/components/PrivateRoute\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/Login\";\nimport ChapterView from \"@/pages/chapter-view\";\nimport SectionReader from \"@/pages/section-reader\";\nimport Admin from \"@/pages/admin\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={(props) => <PrivateRoute component={Home} {...props} />} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/chapter/:id\" component={(props) => <PrivateRoute component={ChapterView} {...props} />} />\n      <Route path=\"/read/:sectionId\" component={(props) => <PrivateRoute component={SectionReader} {...props} />} />\n      <Route path=\"/admin\" component={(props) => <PrivateRoute component={Admin} adminOnly {...props} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1469},"client/src/components/PolaroidCard.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\ninterface PolaroidCardProps {\n  title: string;\n  coverUrl?: string;\n  mood?: string;\n  tags?: string[];\n  description?: string;\n  onClick?: () => void;\n}\n\nexport function PolaroidCard({\n  title,\n  coverUrl,\n  mood,\n  tags = [],\n  description,\n  onClick,\n}: PolaroidCardProps) {\n  return (\n    <Card\n      className=\"bg-white dark:bg-card shadow-lg hover:shadow-xl transition-all duration-180 hover:-translate-y-1 hover:animate-sway cursor-pointer border-0 overflow-hidden rounded-2xl\"\n      onClick={onClick}\n      data-testid={`card-polaroid-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n    >\n      <div className=\"relative\">\n        {coverUrl ? (\n          <img\n            src={coverUrl}\n            alt={title}\n            className=\"w-full h-48 object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-48 bg-gradient-to-br from-kdrama-sakura/30 via-kdrama-lavender/30 to-kdrama-sky/30\" />\n        )}\n        <div className=\"absolute top-2 left-2\">\n          <div className=\"w-3 h-3 rounded-full bg-kdrama-thread shadow-md\" />\n        </div>\n      </div>\n      \n      <CardHeader className=\"pb-2\">\n        <h3 className=\"font-myeongjo text-lg font-bold text-kdrama-ink dark:text-foreground line-clamp-2\">\n          {title}\n        </h3>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-2\">\n        {mood && (\n          <Badge variant=\"secondary\" className=\"font-noto text-xs\">\n            {mood}\n          </Badge>\n        )}\n        {tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {tags.slice(0, 3).map((tag) => (\n              <Badge key={tag} variant=\"outline\" className=\"font-noto text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n        {description && (\n          <p className=\"font-noto text-sm text-muted-foreground line-clamp-2\">\n            {description}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2074},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/examples/AnalyticsDashboard.tsx":{"content":"import { AnalyticsDashboard } from \"../AnalyticsDashboard\";\n\nexport default function AnalyticsDashboardExample() {\n  const mockPageViews = [\n    {\n      id: \"1\",\n      startedAt: new Date(\"2024-03-15T14:30:00\"),\n      endedAt: new Date(\"2024-03-15T14:35:00\"),\n      activeMs: 240000,\n      maxScrollPct: 100,\n      completionMilestone: 100 as const,\n      isReread: false,\n    },\n    {\n      id: \"2\",\n      startedAt: new Date(\"2024-03-16T10:15:00\"),\n      endedAt: new Date(\"2024-03-16T10:20:00\"),\n      activeMs: 180000,\n      maxScrollPct: 75,\n      completionMilestone: 75 as const,\n      isReread: false,\n    },\n    {\n      id: \"3\",\n      startedAt: new Date(\"2024-03-17T16:45:00\"),\n      endedAt: new Date(\"2024-03-17T16:52:00\"),\n      activeMs: 300000,\n      maxScrollPct: 100,\n      completionMilestone: 100 as const,\n      isReread: true,\n    },\n  ];\n\n  return (\n    <div className=\"p-8 bg-kdrama-sky/10 min-h-screen\">\n      <div className=\"max-w-6xl mx-auto\">\n        <h2 className=\"font-myeongjo text-3xl text-kdrama-ink mb-6\">\n          Page Analytics\n        </h2>\n        <AnalyticsDashboard\n          pageViews={mockPageViews}\n          totalVisitors={156}\n          avgActiveTime={220000}\n          avgCompletion={82}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1276},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AnalyticsDashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, Clock, TrendingUp, Users } from \"lucide-react\";\nimport { Knot } from \"./Knot\";\n\ninterface PageView {\n  id: string;\n  startedAt: Date;\n  endedAt?: Date;\n  activeMs: number;\n  maxScrollPct: number;\n  completionMilestone?: 0 | 25 | 50 | 75 | 100;\n  isReread: boolean;\n}\n\ninterface AnalyticsDashboardProps {\n  pageViews?: PageView[];\n  totalVisitors?: number;\n  avgActiveTime?: number;\n  avgCompletion?: number;\n}\n\nexport function AnalyticsDashboard({\n  pageViews = [],\n  totalVisitors = 0,\n  avgActiveTime = 0,\n  avgCompletion = 0,\n}: AnalyticsDashboardProps) {\n  const formatDuration = (ms: number) => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Total Visitors</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">{totalVisitors}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Avg. Read Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">\n              {formatDuration(avgActiveTime)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Avg. Completion</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">{avgCompletion}%</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Page Views</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">{pageViews.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo\">Reading Timeline</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {pageViews.slice(0, 5).map((view) => (\n              <div\n                key={view.id}\n                className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-lg\"\n                data-testid={`view-${view.id}`}\n              >\n                <Knot\n                  size=\"md\"\n                  tone={view.completionMilestone === 100 ? \"primary\" : \"muted\"}\n                />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"font-noto text-sm\">\n                      {view.startedAt.toLocaleString()}\n                    </span>\n                    {view.isReread && (\n                      <Badge variant=\"secondary\" className=\"text-xs font-noto\">\n                        Re-read\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-4 text-xs text-muted-foreground font-noto\">\n                    <span>Active: {formatDuration(view.activeMs)}</span>\n                    <span>Scroll: {view.maxScrollPct}%</span>\n                    {view.completionMilestone !== undefined && (\n                      <span>Completion: {view.completionMilestone}%</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4464},"client/src/components/examples/PolaroidCard.tsx":{"content":"import { PolaroidCard } from \"../PolaroidCard\";\n\nexport default function PolaroidCardExample() {\n  return (\n    <div className=\"p-8 bg-kdrama-cream/20 min-h-[400px]\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink mb-6\">Polaroid Cards</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <PolaroidCard\n            title=\"First Meeting Under the Rain\"\n            mood=\"Romantic\"\n            tags={[\"destiny\", \"umbrella\", \"seoul\"]}\n            description=\"The moment our paths crossed on that rainy evening...\"\n            onClick={() => console.log(\"Card clicked\")}\n          />\n          <PolaroidCard\n            title=\"Coffee Shop Confessions\"\n            mood=\"Sweet\"\n            tags={[\"coffee\", \"confession\", \"heartfelt\"]}\n            description=\"Words unspoken finally found their way out...\"\n          />\n          <PolaroidCard\n            title=\"Sunset at Han River\"\n            mood=\"Peaceful\"\n            tags={[\"sunset\", \"han-river\", \"reflection\"]}\n            description=\"Watching the sun set, we talked about everything and nothing...\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1196},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Heart } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const success = await login(username, password);\n\n    if (success) {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      setLocation(\"/\");\n    } else {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid username or password.\",\n        variant: \"destructive\",\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleGuestAccess = () => {\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-kdrama-sakura/20 via-kdrama-lavender/20 to-kdrama-sky/20 p-4\">\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-10 left-10 w-32 h-32 bg-kdrama-sakura/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-20 right-20 w-40 h-40 bg-kdrama-lavender/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-kdrama-sky/10 rounded-full blur-3xl\"></div>\n      </div>\n\n      <Card className=\"w-full max-w-md relative z-10 border-kdrama-thread/20 shadow-lg\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <Heart className=\"w-12 h-12 text-kdrama-thread fill-kdrama-thread\" />\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-kdrama-thread rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n          <CardTitle className=\"font-myeongjo text-3xl text-kdrama-ink\">\n            紅線日記\n          </CardTitle>\n          <CardDescription className=\"font-noto text-base\">\n            Red String of Fate Journal\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"font-noto\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Enter your username\"\n                required\n                disabled={isLoading}\n                data-testid=\"input-username\"\n                className=\"font-noto\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"font-noto\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n                disabled={isLoading}\n                data-testid=\"input-password\"\n                className=\"font-noto\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full font-noto\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-kdrama-thread/20\"></span>\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-card px-2 text-muted-foreground font-noto\">Or</span>\n            </div>\n          </div>\n\n          <Button\n            variant=\"outline\"\n            className=\"w-full font-noto\"\n            onClick={handleGuestAccess}\n            data-testid=\"button-guest\"\n          >\n            Continue as Guest\n          </Button>\n\n          <p className=\"text-xs text-center text-muted-foreground font-noto\">\n            Guests can read all content. Admin access required for editing.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4962},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertChapterSchema, insertSectionSchema, insertPageSchema, insertReadingProgressSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        role: user.role,\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Chapter routes\n  app.get(\"/api/chapters\", async (req, res) => {\n    try {\n      const allChapters = await storage.getChapters();\n      res.json(allChapters);\n    } catch (error) {\n      console.error(\"Get chapters error:\", error);\n      res.status(500).json({ error: \"Failed to fetch chapters\" });\n    }\n  });\n\n  app.get(\"/api/chapters/:id\", async (req, res) => {\n    try {\n      const chapter = await storage.getChapter(req.params.id);\n      if (!chapter) {\n        return res.status(404).json({ error: \"Chapter not found\" });\n      }\n      res.json(chapter);\n    } catch (error) {\n      console.error(\"Get chapter error:\", error);\n      res.status(500).json({ error: \"Failed to fetch chapter\" });\n    }\n  });\n\n  app.post(\"/api/chapters\", async (req, res) => {\n    try {\n      const validatedData = insertChapterSchema.parse(req.body);\n      const chapter = await storage.createChapter(validatedData);\n      res.status(201).json(chapter);\n    } catch (error) {\n      console.error(\"Create chapter error:\", error);\n      res.status(400).json({ error: \"Invalid chapter data\" });\n    }\n  });\n\n  app.patch(\"/api/chapters/:id\", async (req, res) => {\n    try {\n      const chapter = await storage.updateChapter(req.params.id, req.body);\n      if (!chapter) {\n        return res.status(404).json({ error: \"Chapter not found\" });\n      }\n      res.json(chapter);\n    } catch (error) {\n      console.error(\"Update chapter error:\", error);\n      res.status(500).json({ error: \"Failed to update chapter\" });\n    }\n  });\n\n  app.delete(\"/api/chapters/:id\", async (req, res) => {\n    try {\n      await storage.deleteChapter(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete chapter error:\", error);\n      res.status(500).json({ error: \"Failed to delete chapter\" });\n    }\n  });\n\n  // Section routes\n  app.get(\"/api/chapters/:chapterId/sections\", async (req, res) => {\n    try {\n      const allSections = await storage.getSectionsByChapter(req.params.chapterId);\n      res.json(allSections);\n    } catch (error) {\n      console.error(\"Get sections error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sections\" });\n    }\n  });\n\n  app.get(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const section = await storage.getSection(req.params.id);\n      if (!section) {\n        return res.status(404).json({ error: \"Section not found\" });\n      }\n      res.json(section);\n    } catch (error) {\n      console.error(\"Get section error:\", error);\n      res.status(500).json({ error: \"Failed to fetch section\" });\n    }\n  });\n\n  app.post(\"/api/sections\", async (req, res) => {\n    try {\n      const validatedData = insertSectionSchema.parse(req.body);\n      const section = await storage.createSection(validatedData);\n      res.status(201).json(section);\n    } catch (error) {\n      console.error(\"Create section error:\", error);\n      res.status(400).json({ error: \"Invalid section data\" });\n    }\n  });\n\n  app.patch(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const section = await storage.updateSection(req.params.id, req.body);\n      if (!section) {\n        return res.status(404).json({ error: \"Section not found\" });\n      }\n      res.json(section);\n    } catch (error) {\n      console.error(\"Update section error:\", error);\n      res.status(500).json({ error: \"Failed to update section\" });\n    }\n  });\n\n  app.delete(\"/api/sections/:id\", async (req, res) => {\n    try {\n      await storage.deleteSection(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete section error:\", error);\n      res.status(500).json({ error: \"Failed to delete section\" });\n    }\n  });\n\n  // Page routes\n  app.get(\"/api/sections/:sectionId/pages\", async (req, res) => {\n    try {\n      const allPages = await storage.getPagesBySection(req.params.sectionId);\n      res.json(allPages);\n    } catch (error) {\n      console.error(\"Get pages error:\", error);\n      res.status(500).json({ error: \"Failed to fetch pages\" });\n    }\n  });\n\n  app.get(\"/api/pages/:id\", async (req, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page) {\n        return res.status(404).json({ error: \"Page not found\" });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error(\"Get page error:\", error);\n      res.status(500).json({ error: \"Failed to fetch page\" });\n    }\n  });\n\n  app.post(\"/api/pages\", async (req, res) => {\n    try {\n      const validatedData = insertPageSchema.parse(req.body);\n      const page = await storage.createPage(validatedData);\n      res.status(201).json(page);\n    } catch (error) {\n      console.error(\"Create page error:\", error);\n      res.status(400).json({ error: \"Invalid page data\" });\n    }\n  });\n\n  app.patch(\"/api/pages/:id\", async (req, res) => {\n    try {\n      const page = await storage.updatePage(req.params.id, req.body);\n      if (!page) {\n        return res.status(404).json({ error: \"Page not found\" });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error(\"Update page error:\", error);\n      res.status(500).json({ error: \"Failed to update page\" });\n    }\n  });\n\n  app.delete(\"/api/pages/:id\", async (req, res) => {\n    try {\n      await storage.deletePage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete page error:\", error);\n      res.status(500).json({ error: \"Failed to delete page\" });\n    }\n  });\n\n  // Reading progress routes\n  app.get(\"/api/reading-progress\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string | undefined;\n      const progress = await storage.getUserReadingProgress(userId || null);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Get reading progress error:\", error);\n      res.status(500).json({ error: \"Failed to fetch reading progress\" });\n    }\n  });\n\n  app.get(\"/api/reading-progress/last\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string | undefined;\n      const progress = await storage.getLastReadSection(userId || null);\n      res.json(progress || null);\n    } catch (error) {\n      console.error(\"Get last read error:\", error);\n      res.status(500).json({ error: \"Failed to fetch last read section\" });\n    }\n  });\n\n  app.post(\"/api/reading-progress\", async (req, res) => {\n    try {\n      const validatedData = insertReadingProgressSchema.parse(req.body);\n      const progress = await storage.upsertReadingProgress(validatedData);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Save reading progress error:\", error);\n      res.status(400).json({ error: \"Invalid progress data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":7799},"server/seed.ts":{"content":"import { storage } from \"./storage\";\n\nasync function seed() {\n  try {\n    console.log(\"Seeding database...\");\n\n    // Create admin user\n    const adminUser = await storage.createUser({\n      username: \"admin\",\n      password: \"admin123\",\n      role: \"admin\",\n    });\n    console.log(\"Created admin user:\", adminUser.username);\n\n    // Create reader user for testing\n    const readerUser = await storage.createUser({\n      username: \"reader\",\n      password: \"reader123\",\n      role: \"reader\",\n    });\n    console.log(\"Created reader user:\", readerUser.username);\n\n    // Create Chapter 1: Spring Destiny\n    const chapter1 = await storage.createChapter({\n      title: \"Spring Destiny\",\n      description: \"The beginning of our story under the cherry blossoms\",\n      order: 1,\n    });\n\n    // Create sections for Chapter 1\n    const section1 = await storage.createSection({\n      chapterId: chapter1.id,\n      title: \"Under the Cherry Blossoms\",\n      mood: \"Romantic\",\n      tags: [\"spring\", \"first-meeting\", \"destiny\"],\n      order: 1,\n    });\n\n    const section2 = await storage.createSection({\n      chapterId: chapter1.id,\n      title: \"The Coffee Shop Promise\",\n      mood: \"Hopeful\",\n      tags: [\"cafe\", \"promise\", \"beginning\"],\n      order: 2,\n    });\n\n    // Create pages for section 1\n    await storage.createPage({\n      sectionId: section1.id,\n      content: `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last day of cherry blossom season at Yeouido Park.\n\nThe petals were falling like snow, and I was trying to capture the perfect photo when my camera slipped from my hands. Before it could hit the ground, you caught it.\n\n\"Careful,\" you said, smiling. \"These moments are too precious to drop.\"\n\nThat's when I first saw your eyes – warm, kind, and somehow familiar, as if I'd known them in another lifetime.\n\nThey say there's a red thread connecting those who are destined to meet. In that moment, under the falling petals, I felt it pull tight between us.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section1.id,\n      content: `\"Thank you,\" I managed to say, my heart beating faster than it should from a simple act of kindness.\n\n\"I'm here doing the same thing,\" you said, showing me your own camera. \"Trying to hold onto spring before it's gone.\"\n\nWe walked together that afternoon, comparing photos, talking about nothing and everything. You told me about your work as a photographer, how you chase light and moments. I told you about my writing, how I try to capture feelings in words.\n\nWhen the rain finally came, we stood under a single umbrella, watching the last petals wash away down the street.\n\n\"I feel like I've been waiting to meet you,\" you said quietly.\n\n\"Me too,\" I whispered back, and I meant it with every fiber of my being.\n\nThat was the beginning. Our red thread had found its match.`,\n      pageNumber: 2,\n    });\n\n    // Create pages for section 2\n    await storage.createPage({\n      sectionId: section2.id,\n      content: `The café became our place. Every Sunday at 2 PM, without fail, we'd meet at the corner table by the window.\n\n\"Same order?\" the barista would ask, already knowing the answer. Two americanos, one croissant to share.\n\nYou'd show me the photos from your week – street scenes, landscapes, faces that told stories. I'd read you passages from whatever I was working on, watching your reactions to gauge if the words landed right.\n\n\"You capture time,\" I told you once. \"I capture feelings.\"\n\n\"Maybe together we capture life,\" you said, and that's when you made the promise.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section2.id,\n      content: `\"Let's make a promise,\" you said, pulling out your camera. \"Every important moment, we document it. Your words, my photos. We'll create our own archive of this love.\"\n\nLove. That was the first time either of us had said it out loud.\n\n\"Yes,\" I agreed, feeling the red thread between us pull tighter, more visible, more real.\n\nYou took a photo of us in the café window, the spring light filtering through, our reflections overlapping with the Seoul street behind us.\n\n\"The first entry in our archive,\" you said, and kissed my forehead.\n\nI wrote three words in my notebook: \"Spring. Destiny. Forever.\"\n\nThe promise was made. The thread was tied. And our story continued to unfold, one moment at a time.`,\n      pageNumber: 2,\n    });\n\n    // Create Chapter 2: Summer Adventures\n    const chapter2 = await storage.createChapter({\n      title: \"Summer Adventures\",\n      description: \"Exploring the city together in the golden summer light\",\n      order: 2,\n    });\n\n    const section3 = await storage.createSection({\n      chapterId: chapter2.id,\n      title: \"Han River Nights\",\n      mood: \"Peaceful\",\n      tags: [\"summer\", \"han-river\", \"memories\"],\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section3.id,\n      content: `Summer in Seoul brought a different kind of magic. The humid air carried the sounds of cicadas and laughter from the Han River parks.\n\nEvery Friday night, we'd ride our bikes along the river path, watching the city lights reflect on the water. You'd bring your camera, always ready to capture the golden hour.\n\n\"Look,\" you'd say, pointing at the way the sunset painted the bridges. \"This is why I love photography. How it freezes these fleeting moments.\"\n\nWe'd stop at the convenience store, buying cold drinks and kimbap, finding our spot on the grass. Other couples surrounded us, but in those moments, we had our own universe.\n\nThe red thread that connected us seemed to glow brighter in the summer twilight.`,\n      pageNumber: 1,\n    });\n\n    // Create Chapter 3: Autumn Reflections\n    const chapter3 = await storage.createChapter({\n      title: \"Autumn Reflections\",\n      description: \"The changing seasons mirror the changes in our hearts\",\n      order: 3,\n    });\n\n    const section4 = await storage.createSection({\n      chapterId: chapter3.id,\n      title: \"Golden Leaves and Memories\",\n      mood: \"Nostalgic\",\n      tags: [\"autumn\", \"reflection\", \"photography\"],\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section4.id,\n      content: `Autumn arrived quietly in Seoul. The ginkgo trees lining the streets began their transformation into gold, and the air carried a crispness that reminded us of time passing.\n\nWe spent that October afternoon in Nami Island, walking among the metasequoia trees. The path was covered in fallen leaves, creating a carpet of amber and gold.\n\n\"This is my favorite season,\" you said, raising your camera to capture the dappled sunlight filtering through the canopy. \"Everything is beautiful but temporary. Just like these moments we're capturing.\"\n\n[embed:https://images.unsplash.com/photo-1541339907-f89f0be0e2ac]\n\nI held your hand tighter, understanding the weight of those words. Our archive was growing, each photo and journal entry a thread in the tapestry of our shared story.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section4.id,\n      content: `\"Look at this,\" you said, showing me your camera screen. It was us, reflected in a puddle, surrounded by fallen leaves. \"Beautiful imperfection.\"\n\nWe stopped at a café overlooking the river, ordering hot chocolates and watching other couples pose for photos under the autumn trees.\n\n\"Remember when we first met?\" I asked. \"Under the cherry blossoms in spring?\"\n\n\"How could I forget?\" you smiled. \"We've been through spring, summer, and now autumn together.\"\n\n[embed:https://images.unsplash.com/photo-1544251451-6752e8687e4a]\n\n\"And we'll see winter together too,\" I said, adding another page to my journal. The red thread between us felt stronger than ever, woven through the seasons.`,\n      pageNumber: 2,\n    });\n\n    // Create Chapter 4: Winter Warmth\n    const chapter4 = await storage.createChapter({\n      title: \"Winter Warmth\",\n      description: \"Finding warmth in each other during the coldest season\",\n      order: 4,\n    });\n\n    const section5 = await storage.createSection({\n      chapterId: chapter4.id,\n      title: \"First Snow\",\n      mood: \"Magical\",\n      tags: [\"winter\", \"snow\", \"romance\"],\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section5.id,\n      content: `They say the first snow of winter is magical in Korea. If you see it with someone special, your love will last forever.\n\nI was at home when you called. \"Look outside,\" you said breathlessly.\n\nI pulled back the curtain to see soft, white flakes drifting down from the dark sky. The streetlights illuminated each snowflake like tiny stars falling to earth.\n\n\"I'm coming over,\" you said. \"We need to see this together.\"\n\nTwenty minutes later, you were at my door, snowflakes caught in your hair, your camera around your neck, and that familiar smile on your face.\n\n\"Come on,\" you said, taking my hand. \"Let's catch the first snow.\"`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section5.id,\n      content: `We stood in the empty park, faces turned up to the sky, watching the snow fall. You took photos while I described the feeling in words only I could articulate.\n\n\"It's like the universe is blessing us,\" I said softly.\n\n[embed:https://images.unsplash.com/photo-1482164565953-04b62dcac1cd]\n\n\"The first snow with you,\" you whispered, setting down your camera to hold both my hands. \"This moment, right now, is everything.\"\n\nAround us, Seoul was transforming into a winter wonderland. But all I could see was you, the red thread between us glowing brighter in the falling snow.\n\n\"Forever,\" I promised.\n\n\"Forever,\" you echoed.`,\n      pageNumber: 2,\n    });\n\n    const section6 = await storage.createSection({\n      chapterId: chapter4.id,\n      title: \"Holiday Market Adventures\",\n      mood: \"Joyful\",\n      tags: [\"winter\", \"market\", \"celebration\"],\n      order: 2,\n    });\n\n    await storage.createPage({\n      sectionId: section6.id,\n      content: `December brought the holiday markets to Seoul. Myeongdong was transformed into a wonderland of lights, street food vendors, and festive music.\n\nWe bundled up in matching scarves (your idea, not mine, but I secretly loved it) and dove into the crowds. Your camera was busy capturing everything: the glowing decorations, the steaming tteokbokki stands, children laughing over roasted chestnuts.\n\n\"Try this,\" you said, offering me a cup of hot cinnamon tea. \"Perfect for a cold night.\"\n\nWe wandered through the stalls, your hand warm in mine despite the freezing temperature.\n\n[embed:https://images.unsplash.com/photo-1513094735237-8f2714d57c13]\n\n\"Look,\" you pointed to a stall selling red thread bracelets. \"Like our red thread of fate.\"\n\nWe bought two matching bracelets, tying them around each other's wrists with promises whispered between the knots.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section6.id,\n      content: `As the evening grew later, we found ourselves on a quiet street away from the crowds. The Christmas lights created a magical canopy above us.\n\n\"You know what I love most about winter?\" you asked, pulling me close.\n\n\"What?\"\n\n\"It gives me an excuse to hold you closer.\"\n\nI laughed, wrapping my arms around you. \"You don't need an excuse.\"\n\n[embed:https://images.unsplash.com/photo-1512389142860-9c449e58a543]\n\nWe took a selfie there, under the lights, our smiles bright and our hearts full. Another entry in our ever-growing archive of love.\n\n\"This has been the best year,\" I said.\n\n\"It's only the beginning,\" you replied. \"We have so many more seasons together.\"\n\nAnd I believed you, with every fiber of my being.`,\n      pageNumber: 2,\n    });\n\n    // Create Chapter 5: Special Moments\n    const chapter5 = await storage.createChapter({\n      title: \"Special Moments\",\n      description: \"The unforgettable experiences that define our journey\",\n      order: 5,\n    });\n\n    const section7 = await storage.createSection({\n      chapterId: chapter5.id,\n      title: \"The Rooftop Concert\",\n      mood: \"Exciting\",\n      tags: [\"music\", \"concert\", \"celebration\"],\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section7.id,\n      content: `You surprised me with tickets to a rooftop concert in Hongdae. I didn't even know how you managed to get them – they were sold out within minutes of release.\n\n\"I have my ways,\" you said with that mischievous smile I'd grown to love.\n\nThe venue was intimate, maybe a hundred people maximum, with the Seoul skyline as our backdrop. The indie band played acoustic versions of popular K-drama OSTs, and every song felt like it was written about us.\n\n[embed:https://images.unsplash.com/photo-1514525253161-7a46d19cd819]\n\n\"This is incredible,\" I whispered during a soft ballad, leaning against you.\n\n\"I wanted to give you a night you'd never forget,\" you said, kissing the top of my head.\n\nMission accomplished.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section7.id,\n      content: `As the final song played, the lead singer dedicated it to \"all the lovers finding their way to each other tonight.\"\n\nYou stood, offering your hand. \"Dance with me?\"\n\nRight there, on that rooftop under the stars, we swayed to the music. Other couples joined in, but it felt like we were the only two people in the world.\n\n[embed:https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3]\n\n\"Thank you for this,\" I said.\n\n\"Thank you for being exactly who you are,\" you replied.\n\nThe red thread between us pulsed with every heartbeat, binding us tighter with each passing moment.\n\nI knew then that this wasn't just a relationship. This was destiny, written in the stars, sealed by fate, and captured forever in our archive.`,\n      pageNumber: 2,\n    });\n\n    console.log(\"Database seeded successfully!\");\n    console.log(\"\\n✨ K-Drama Journal is ready to use! ✨\");\n    console.log(\"\\n📝 Login credentials:\");\n    console.log(\"\\nAdmin Account:\");\n    console.log(\"  Username: admin\");\n    console.log(\"  Password: admin123\");\n    console.log(\"\\nReader Account:\");\n    console.log(\"  Username: reader\");\n    console.log(\"  Password: reader123\");\n    console.log(\"\\n✅ Sample data includes:\");\n    console.log(\"   • 5 Chapters covering all seasons\");\n    console.log(\"   • 7 Sections with unique moods and themes\");\n    console.log(\"   • Multiple pages with embedded images\");\n    console.log(\"   • K-Drama inspired content and aesthetics\");\n    \n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}\n\nseed();\n","size_bytes":14817},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"reader\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const chapters = pgTable(\"chapters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  coverImage: text(\"cover_image\"),\n  order: integer(\"order\").notNull(),\n});\n\nexport const insertChapterSchema = createInsertSchema(chapters).omit({\n  id: true,\n});\n\nexport type InsertChapter = z.infer<typeof insertChapterSchema>;\nexport type Chapter = typeof chapters.$inferSelect;\n\nexport const sections = pgTable(\"sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  mood: text(\"mood\"),\n  tags: text(\"tags\").array(),\n  thumbnail: text(\"thumbnail\"),\n  order: integer(\"order\").notNull(),\n});\n\nexport const insertSectionSchema = createInsertSchema(sections).omit({\n  id: true,\n});\n\nexport type InsertSection = z.infer<typeof insertSectionSchema>;\nexport type Section = typeof sections.$inferSelect;\n\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  pageNumber: integer(\"page_number\").notNull(),\n});\n\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n});\n\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type Page = typeof pages.$inferSelect;\n\nexport const readingProgress = pgTable(\"reading_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  pageId: varchar(\"page_id\").references(() => pages.id, { onDelete: \"cascade\" }),\n  completed: boolean(\"completed\").notNull().default(false),\n  lastReadAt: timestamp(\"last_read_at\").notNull().defaultNow(),\n});\n\nexport const insertReadingProgressSchema = createInsertSchema(readingProgress).omit({\n  id: true,\n  lastReadAt: true,\n});\n\nexport type InsertReadingProgress = z.infer<typeof insertReadingProgressSchema>;\nexport type ReadingProgress = typeof readingProgress.$inferSelect;\n","size_bytes":2962},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 240 8% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 240 8% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 240 8% 12%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 351 85% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 30% 88%;\n\n  --sidebar-accent-foreground: 240 8% 12%;\n\n  --sidebar-ring: 351 85% 60%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 240 8% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 351 85% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 240 8% 12%;\n\n  --muted: 210 15% 90%;\n\n  --muted-foreground: 240 6% 35%;\n\n  --accent: 210 20% 88%;\n\n  --accent-foreground: 240 8% 12%;\n\n  --destructive: 351 78% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 351 85% 60%;\n  --chart-1: 351 85% 45%;\n  --chart-2: 263 65% 55%;\n  --chart-3: 198 65% 50%;\n  --chart-4: 45 90% 55%;\n  --chart-5: 351 60% 35%;\n\n  --font-sans: \"Noto Sans KR\", sans-serif;\n  --font-serif: \"Nanum Myeongjo\", serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(351 85% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(351 85% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 1px 2px -1px hsl(351 85% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 1px 2px -1px hsl(351 85% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 2px 4px -1px hsl(351 85% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 4px 6px -1px hsl(351 85% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 8px 10px -1px hsl(351 85% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(351 85% 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 5% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 240 5% 18%;\n\n  --card: 240 5% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 240 5% 16%;\n\n  --sidebar: 240 5% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 240 5% 18%;\n\n  --sidebar-primary: 351 82% 58%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 18% 18%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 351 82% 58%;\n\n  --popover: 240 5% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 240 5% 20%;\n\n  --primary: 351 82% 58%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 240 5% 18%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 210 12% 16%;\n\n  --muted-foreground: 0 0% 75%;\n\n  --accent: 210 15% 16%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 351 75% 52%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 240 5% 35%;\n  --ring: 351 82% 58%;\n  --chart-1: 351 85% 65%;\n  --chart-2: 263 70% 70%;\n  --chart-3: 198 70% 65%;\n  --chart-4: 45 90% 65%;\n  --chart-5: 351 75% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(351 82% 58% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(351 82% 58% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 1px 2px -1px hsl(351 82% 58% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 1px 2px -1px hsl(351 82% 58% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 2px 4px -1px hsl(351 82% 58% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 4px 6px -1px hsl(351 82% 58% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 8px 10px -1px hsl(351 82% 58% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(351 82% 58% / 0.00);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11075},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/section-reader.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ThreadBar } from \"@/components/ThreadBar\";\nimport type { Section, Page } from \"@shared/schema\";\n\nexport default function SectionReader() {\n  const { sectionId } = useParams();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n\n  const { data: section } = useQuery<Section>({\n    queryKey: [`/api/sections/${sectionId}`],\n  });\n\n  const { data: pages = [] } = useQuery<Page[]>({\n    queryKey: [`/api/sections/${sectionId}/pages`],\n  });\n\n  const saveProgressMutation = useMutation({\n    mutationFn: async (data: { pageId: string; completed: boolean }) => {\n      return apiRequest(\"POST\", \"/api/reading-progress\", {\n        userId: user?.role === \"guest\" ? null : user?.id,\n        sectionId: sectionId!,\n        pageId: data.pageId,\n        completed: data.completed,\n      });\n    },\n  });\n\n  const currentPage = pages[currentPageIndex];\n  const totalPages = pages.length;\n  const progress = totalPages > 0 ? ((currentPageIndex + 1) / totalPages) * 100 : 0;\n\n  useEffect(() => {\n    if (currentPage) {\n      const isLastPage = currentPageIndex === totalPages - 1;\n      saveProgressMutation.mutate({\n        pageId: currentPage.id,\n        completed: isLastPage,\n      });\n    }\n  }, [currentPageIndex, currentPage?.id]);\n\n  const handlePrevPage = () => {\n    if (currentPageIndex > 0) {\n      setCurrentPageIndex(currentPageIndex - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (currentPageIndex < totalPages - 1) {\n      setCurrentPageIndex(currentPageIndex + 1);\n    }\n  };\n\n  const handleBackToChapter = () => {\n    if (section?.chapterId) {\n      setLocation(`/chapter/${section.chapterId}`);\n    } else {\n      setLocation(\"/\");\n    }\n  };\n\n  const renderContent = (content: string) => {\n    const embedRegex = /\\[embed:([^\\]]+)\\]/g;\n    const parts = [];\n    let lastIndex = 0;\n    let match;\n\n    while ((match = embedRegex.exec(content)) !== null) {\n      if (match.index > lastIndex) {\n        parts.push(content.substring(lastIndex, match.index));\n      }\n      \n      const embedUrl = match[1];\n      if (embedUrl.includes(\"instagram.com\")) {\n        parts.push(\n          <div key={match.index} className=\"my-6\">\n            <iframe\n              src={`${embedUrl}embed/`}\n              className=\"w-full max-w-md mx-auto rounded-md\"\n              style={{ minHeight: \"500px\" }}\n              frameBorder=\"0\"\n              scrolling=\"no\"\n              allowFullScreen\n            />\n          </div>\n        );\n      } else if (embedUrl.match(/\\.(jpg|jpeg|png|gif|webp)$/i)) {\n        parts.push(\n          <img\n            key={match.index}\n            src={embedUrl}\n            alt=\"Embedded content\"\n            className=\"my-6 rounded-md max-w-full mx-auto\"\n          />\n        );\n      }\n      \n      lastIndex = match.index + match[0].length;\n    }\n\n    if (lastIndex < content.length) {\n      parts.push(content.substring(lastIndex));\n    }\n\n    return parts;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-kdrama-sakura/10 via-kdrama-cream/30 to-kdrama-lavender/10\">\n      <ThreadBar progress={progress} />\n\n      <div className=\"container mx-auto px-4 py-12 max-w-4xl\">\n        <div className=\"mb-8 flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleBackToChapter}\n            data-testid=\"button-back-chapter\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"flex-1\">\n            <h1 className=\"font-myeongjo text-3xl md:text-4xl text-kdrama-ink\">\n              {section?.title || \"Loading...\"}\n            </h1>\n            {section && (\n              <div className=\"flex flex-wrap items-center gap-3 mt-3\">\n                {section.mood && (\n                  <Badge variant=\"secondary\" className=\"font-noto\">\n                    {section.mood}\n                  </Badge>\n                )}\n                {section.tags?.map((tag) => (\n                  <Badge key={tag} variant=\"outline\" className=\"font-noto\">\n                    #{tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <Card className=\"p-8 md:p-12 bg-white/80 backdrop-blur-sm border-0 shadow-md\">\n          <div className=\"prose prose-lg max-w-none font-noto\">\n            {currentPage ? (\n              <div className=\"whitespace-pre-wrap leading-relaxed text-kdrama-ink\">\n                {renderContent(currentPage.content)}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground\">Loading content...</p>\n            )}\n          </div>\n        </Card>\n\n        {totalPages > 1 && (\n          <div className=\"mt-8 flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevPage}\n              disabled={currentPageIndex === 0}\n              data-testid=\"button-prev-page\"\n            >\n              <ChevronLeft className=\"w-4 h-4 mr-2\" />\n              Previous\n            </Button>\n\n            <div className=\"font-noto text-sm text-muted-foreground\">\n              Page {currentPageIndex + 1} of {totalPages}\n            </div>\n\n            <Button\n              variant=\"outline\"\n              onClick={handleNextPage}\n              disabled={currentPageIndex === totalPages - 1}\n              data-testid=\"button-next-page\"\n            >\n              Next\n              <ChevronRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6095},"client/src/components/Knot.tsx":{"content":"import { Heart } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface KnotProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  label?: string;\n  tone?: \"primary\" | \"gold\" | \"muted\";\n  className?: string;\n}\n\nconst sizeClasses = {\n  sm: \"w-3 h-3\",\n  md: \"w-4 h-4\",\n  lg: \"w-6 h-6\",\n};\n\nconst toneClasses = {\n  primary: \"fill-kdrama-thread text-kdrama-thread\",\n  gold: \"fill-kdrama-lavender text-kdrama-lavender\",\n  muted: \"fill-kdrama-sakura/50 text-kdrama-sakura/50\",\n};\n\nexport function Knot({ size = \"md\", label, tone = \"primary\", className = \"\" }: KnotProps) {\n  const heart = (\n    <Heart\n      className={`${sizeClasses[size]} ${toneClasses[tone]} transition-all duration-180 hover:scale-105 ${className}`}\n      aria-label={label || \"Knot marker\"}\n      tabIndex={label ? 0 : undefined}\n    />\n  );\n\n  if (label) {\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className=\"inline-block cursor-help\">{heart}</div>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p className=\"font-noto text-sm\">{label}</p>\n        </TooltipContent>\n      </Tooltip>\n    );\n  }\n\n  return heart;\n}\n","size_bytes":1175},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminToolbar.tsx":{"content":"import { AdminToolbar } from \"../AdminToolbar\";\nimport { useState } from \"react\";\n\nexport default function AdminToolbarExample() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isPublished, setIsPublished] = useState(true);\n\n  return (\n    <div className=\"min-h-[300px]\">\n      <AdminToolbar\n        isEditing={isEditing}\n        isPublished={isPublished}\n        onToggleEdit={() => {\n          setIsEditing(!isEditing);\n          console.log(\"Toggle edit mode\");\n        }}\n        onSave={() => console.log(\"Save changes\")}\n        onTogglePublish={() => {\n          setIsPublished(!isPublished);\n          console.log(\"Toggle publish status\");\n        }}\n        onSetEditedDate={() => console.log(\"Set edited date\")}\n        onDelete={() => console.log(\"Delete page\")}\n        onViewAnalytics={() => console.log(\"View analytics\")}\n      />\n      <div className=\"p-8\">\n        <p className=\"font-noto text-muted-foreground text-center\">\n          Admin toolbar is fixed at the top. Try the buttons to see console logs.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1083},"client/src/components/EmbedPlaceholder.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Instagram, Music2, ExternalLink } from \"lucide-react\";\n\ninterface EmbedPlaceholderProps {\n  type: \"instagram\" | \"spotify\";\n  url: string;\n  title?: string;\n}\n\nexport function EmbedPlaceholder({ type, url, title }: EmbedPlaceholderProps) {\n  const config = {\n    instagram: {\n      icon: Instagram,\n      label: \"Instagram Reel\",\n      gradient: \"from-purple-500 to-pink-500\",\n      buttonText: \"View on Instagram\",\n    },\n    spotify: {\n      icon: Music2,\n      label: \"Spotify Track\",\n      gradient: \"from-green-500 to-emerald-500\",\n      buttonText: \"Listen on Spotify\",\n    },\n  };\n\n  const { icon: Icon, label, gradient, buttonText } = config[type];\n\n  return (\n    <Card className=\"overflow-hidden rounded-2xl border-0 shadow-md\">\n      <div className={`h-2 bg-gradient-to-r ${gradient}`} />\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div className={`p-3 rounded-full bg-gradient-to-r ${gradient}`}>\n            <Icon className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h4 className=\"font-myeongjo font-bold text-kdrama-ink dark:text-foreground\">\n              {title || label}\n            </h4>\n            <p className=\"font-noto text-sm text-muted-foreground\">\n              Embedded content\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"aspect-video bg-muted/30 rounded-lg flex items-center justify-center mb-4\">\n          <Icon className=\"w-16 h-16 text-muted-foreground/30\" />\n        </div>\n\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full font-noto\"\n          onClick={() => window.open(url, \"_blank\")}\n          data-testid={`button-${type}-open`}\n        >\n          <ExternalLink className=\"w-4 h-4 mr-2\" />\n          {buttonText}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1990},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { AdminToolbar } from \"@/components/AdminToolbar\";\nimport { AnalyticsDashboard } from \"@/components/AnalyticsDashboard\";\nimport { ReadingContent } from \"@/components/ReadingContent\";\nimport { EmbedPlaceholder } from \"@/components/EmbedPlaceholder\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function Admin() {\n  const [, setLocation] = useLocation();\n  const { user, isAdmin } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [isPublished, setIsPublished] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"content\");\n\n  useEffect(() => {\n    if (!isAdmin) {\n      setLocation(\"/\");\n    }\n  }, [isAdmin, setLocation]);\n\n  if (!isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-kdrama-cream/20 to-kdrama-sky/10\">\n        <Card className=\"max-w-md\">\n          <CardHeader>\n            <div className=\"flex items-center gap-2 text-kdrama-thread\">\n              <AlertCircle className=\"w-5 h-5\" />\n              <CardTitle className=\"font-myeongjo\">Access Denied</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"font-noto text-muted-foreground\">\n              You need admin privileges to access this page.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const mockPageViews = [\n    {\n      id: \"1\",\n      startedAt: new Date(\"2024-03-15T14:30:00\"),\n      endedAt: new Date(\"2024-03-15T14:35:00\"),\n      activeMs: 240000,\n      maxScrollPct: 100,\n      completionMilestone: 100 as const,\n      isReread: false,\n    },\n    {\n      id: \"2\",\n      startedAt: new Date(\"2024-03-16T10:15:00\"),\n      endedAt: new Date(\"2024-03-16T10:20:00\"),\n      activeMs: 180000,\n      maxScrollPct: 75,\n      completionMilestone: 75 as const,\n      isReread: false,\n    },\n    {\n      id: \"3\",\n      startedAt: new Date(\"2024-03-17T16:45:00\"),\n      endedAt: new Date(\"2024-03-17T16:52:00\"),\n      activeMs: 300000,\n      maxScrollPct: 100,\n      completionMilestone: 100 as const,\n      isReread: true,\n    },\n  ];\n\n  const mockContent = `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last days of the cherry blossom season. You were standing under the biggest tree in Yeouido Park, camera in hand, trying to capture the perfect shot.\n\nWhen our eyes met, it felt like the world stopped for just a moment. The petals were falling around us like snow, and I remember thinking that this must be what they mean by \"destiny.\"`;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/20 to-kdrama-sky/10\">\n      <AdminToolbar\n        isEditing={isEditing}\n        isPublished={isPublished}\n        onToggleEdit={() => setIsEditing(!isEditing)}\n        onSave={() => console.log(\"Save changes\")}\n        onTogglePublish={() => setIsPublished(!isPublished)}\n        onSetEditedDate={() => console.log(\"Set edited date\")}\n        onDelete={() => console.log(\"Delete page\")}\n        onViewAnalytics={() => setActiveTab(\"analytics\")}\n      />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full max-w-md mx-auto grid-cols-3 mb-8\">\n            <TabsTrigger value=\"content\" className=\"font-noto\" data-testid=\"tab-content\">\n              Content\n            </TabsTrigger>\n            <TabsTrigger value=\"media\" className=\"font-noto\" data-testid=\"tab-media\">\n              Media\n            </TabsTrigger>\n            {isAdmin && (\n              <TabsTrigger value=\"analytics\" className=\"font-noto\" data-testid=\"tab-analytics\">\n                Analytics\n              </TabsTrigger>\n            )}\n          </TabsList>\n\n          <TabsContent value=\"content\" className=\"space-y-6\">\n            {isEditing ? (\n              <Card className=\"max-w-4xl mx-auto\">\n                <CardHeader>\n                  <CardTitle className=\"font-myeongjo\">Edit Page</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"font-noto text-sm font-medium mb-2 block\">Title</label>\n                    <Input\n                      defaultValue=\"Under the Cherry Blossoms\"\n                      className=\"font-myeongjo text-lg\"\n                      data-testid=\"input-title\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"font-noto text-sm font-medium mb-2 block\">Mood</label>\n                      <Input\n                        defaultValue=\"Romantic\"\n                        data-testid=\"input-mood\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"font-noto text-sm font-medium mb-2 block\">Tags</label>\n                      <Input\n                        defaultValue=\"spring, destiny, first-meeting\"\n                        placeholder=\"Comma-separated tags\"\n                        data-testid=\"input-tags\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"font-noto text-sm font-medium mb-2 block\">Content</label>\n                    <Textarea\n                      defaultValue={mockContent}\n                      className=\"font-noto min-h-96\"\n                      data-testid=\"textarea-content\"\n                    />\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Badge variant=\"secondary\" className=\"font-noto\">\n                      TipTap Editor Coming Soon\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"font-noto\">\n                      Slash Commands: /reel /spotify /thread /knot\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"max-w-4xl mx-auto\">\n                <ReadingContent\n                  title=\"Under the Cherry Blossoms\"\n                  content={mockContent}\n                  mood=\"Romantic\"\n                  tags={[\"spring\", \"destiny\", \"first-meeting\"]}\n                  editedAt={new Date(\"2024-03-15T14:30:00\")}\n                />\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"media\" className=\"space-y-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"font-myeongjo text-3xl text-kdrama-ink dark:text-foreground mb-6\">\n                Media Embeds\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <EmbedPlaceholder\n                  type=\"instagram\"\n                  url=\"https://www.instagram.com/reel/example\"\n                  title=\"Behind the Scenes - Cherry Blossom Festival\"\n                />\n                <EmbedPlaceholder\n                  type=\"spotify\"\n                  url=\"https://open.spotify.com/track/example\"\n                  title=\"Our Song - K-Drama OST\"\n                />\n              </div>\n              <div className=\"mt-6 p-4 bg-muted/30 rounded-lg\">\n                <p className=\"font-noto text-sm text-muted-foreground\">\n                  <strong>Paste Detection:</strong> When editing, pasting an Instagram or Spotify URL will automatically convert it to an embed.\n                </p>\n              </div>\n            </div>\n          </TabsContent>\n\n          {isAdmin && (\n            <TabsContent value=\"analytics\" className=\"space-y-6\">\n              <div className=\"max-w-6xl mx-auto\">\n                <AnalyticsDashboard\n                  pageViews={mockPageViews}\n                  totalVisitors={156}\n                  avgActiveTime={220000}\n                  avgCompletion={82}\n                />\n\n                <Card className=\"mt-6\">\n                  <CardHeader>\n                    <CardTitle className=\"font-myeongjo\">Tracking Features</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-2 font-noto text-sm\">\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-kdrama-thread\">•</span>\n                        <span>Active time counter pauses when tab is hidden, window loses focus, or user is idle for 20+ seconds</span>\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-kdrama-thread\">•</span>\n                        <span>Heartbeat system sends updates every 10 seconds with active time deltas and scroll progress</span>\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-kdrama-thread\">•</span>\n                        <span>Milestone detection at 25%, 50%, 75%, and 100% using IntersectionObserver</span>\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-kdrama-thread\">•</span>\n                        <span>Re-read tracking links subsequent visits to the first page view</span>\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-kdrama-thread\">•</span>\n                        <span>Media event capture for Instagram Reel and Spotify embed interactions</span>\n                      </li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10480},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ThreadBar.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Knot } from \"./Knot\";\n\ninterface ThreadBarProps {\n  progress: number;\n  paused?: boolean;\n  milestones?: number[];\n  showLabels?: boolean;\n  onMilestone?: (milestone: number) => void;\n}\n\nexport function ThreadBar({\n  progress,\n  paused = false,\n  milestones = [0.25, 0.5, 0.75, 1],\n  showLabels = false,\n  onMilestone,\n}: ThreadBarProps) {\n  const [hitMilestones, setHitMilestones] = useState<Set<number>>(new Set());\n\n  useEffect(() => {\n    milestones.forEach((m) => {\n      if (progress >= m && !hitMilestones.has(m)) {\n        setHitMilestones((prev) => new Set(prev).add(m));\n        onMilestone?.(m);\n      }\n    });\n  }, [progress, milestones, hitMilestones, onMilestone]);\n\n  return (\n    <div\n      className=\"relative w-full h-1 bg-transparent overflow-visible\"\n      role=\"progressbar\"\n      aria-valuenow={Math.round(progress * 100)}\n      aria-valuemin={0}\n      aria-valuemax={100}\n    >\n      <div\n        className=\"absolute left-0 top-1/2 -translate-y-1/2 h-[2px] bg-gradient-to-r from-kdrama-sakura/30 to-kdrama-lavender/30 w-full\"\n      />\n      \n      <div\n        className={`absolute left-0 top-1/2 -translate-y-1/2 h-[2px] bg-kdrama-thread transition-all duration-300 ${\n          paused ? \"opacity-60\" : \"opacity-100\"\n        }`}\n        style={{ width: `${progress * 100}%` }}\n      />\n      \n      {milestones.map((milestone) => {\n        const isHit = progress >= milestone;\n        return (\n          <div\n            key={milestone}\n            className=\"absolute top-1/2 -translate-y-1/2 -translate-x-1/2 z-10\"\n            style={{ left: `${milestone * 100}%` }}\n          >\n            <Knot\n              size=\"sm\"\n              tone={isHit ? \"primary\" : \"muted\"}\n              className={`transition-all duration-180 ${\n                isHit ? \"animate-pulse-gentle\" : \"\"\n              }`}\n            />\n            {showLabels && (\n              <span className=\"absolute top-6 left-1/2 -translate-x-1/2 text-xs text-muted-foreground font-noto whitespace-nowrap\">\n                {Math.round(milestone * 100)}%\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2194},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/examples/ChapterNav.tsx":{"content":"import { ChapterNav } from \"../ChapterNav\";\nimport { useState } from \"react\";\n\nexport default function ChapterNavExample() {\n  const [activeId, setActiveId] = useState(\"ch2\");\n\n  const mockChapters = [\n    {\n      id: \"ch1\",\n      title: \"The Beginning\",\n      emoji: \"🌸\",\n      order: 1,\n      isPublic: true,\n      pageCount: 5,\n    },\n    {\n      id: \"ch2\",\n      title: \"Unexpected Encounters\",\n      emoji: \"☂️\",\n      order: 2,\n      isPublic: true,\n      pageCount: 8,\n    },\n    {\n      id: \"ch3\",\n      title: \"Growing Closer\",\n      emoji: \"💜\",\n      order: 3,\n      isPublic: true,\n      pageCount: 12,\n    },\n    {\n      id: \"ch4\",\n      title: \"Challenges & Revelations\",\n      emoji: \"⚡\",\n      order: 4,\n      isPublic: true,\n      pageCount: 6,\n    },\n  ];\n\n  return (\n    <div className=\"p-8 bg-kdrama-lavender/10 min-h-[500px]\">\n      <div className=\"max-w-md mx-auto\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink mb-6\">Chapters</h3>\n        <ChapterNav\n          chapters={mockChapters}\n          activeChapterId={activeId}\n          onChapterClick={(id) => {\n            setActiveId(id);\n            console.log(`Chapter clicked: ${id}`);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1244},"client/src/components/examples/EmbedPlaceholder.tsx":{"content":"import { EmbedPlaceholder } from \"../EmbedPlaceholder\";\n\nexport default function EmbedPlaceholderExample() {\n  return (\n    <div className=\"p-8 bg-kdrama-lavender/10 min-h-[600px]\">\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink mb-6\">Media Embeds</h3>\n        \n        <EmbedPlaceholder\n          type=\"instagram\"\n          url=\"https://www.instagram.com/reel/example\"\n          title=\"Behind the Scenes - Cherry Blossom Festival\"\n        />\n\n        <EmbedPlaceholder\n          type=\"spotify\"\n          url=\"https://open.spotify.com/track/example\"\n          title=\"Our Song - K-Drama OST\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":700},"client/src/components/examples/FateLinks.tsx":{"content":"import { FateLinks } from \"../FateLinks\";\n\nexport default function FateLinksExample() {\n  const mockCandidates = [\n    {\n      id: \"1\",\n      title: \"Lost in Translation\",\n      slug: \"lost-in-translation\",\n      tags: [\"language\", \"culture\", \"misunderstanding\"],\n      mood: \"Bittersweet\",\n      description: \"When words fail but hearts understand...\",\n    },\n    {\n      id: \"2\",\n      title: \"The Convenience Store Date\",\n      slug: \"convenience-store-date\",\n      tags: [\"late-night\", \"ramyeon\", \"companionship\"],\n      mood: \"Cozy\",\n      description: \"Sharing instant noodles at 3 AM became our tradition...\",\n    },\n    {\n      id: \"3\",\n      title: \"Cherry Blossoms in Yeouido\",\n      slug: \"cherry-blossoms\",\n      tags: [\"spring\", \"cherry-blossoms\", \"promises\"],\n      mood: \"Hopeful\",\n      description: \"Under the sakura trees, we made a promise...\",\n    },\n  ];\n\n  return (\n    <div className=\"p-8 bg-gradient-to-b from-kdrama-cream/20 to-kdrama-sky/20 min-h-[600px]\">\n      <div className=\"max-w-6xl mx-auto\">\n        <FateLinks\n          currentPageId=\"current\"\n          candidates={mockCandidates}\n          onNavigate={(slug) => console.log(`Navigate to: ${slug}`)}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1227},"client/src/components/examples/ReadingContent.tsx":{"content":"import { ReadingContent } from \"../ReadingContent\";\n\nexport default function ReadingContentExample() {\n  const mockContent = `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last days of the cherry blossom season. You were standing under the biggest tree in Yeouido Park, camera in hand, trying to capture the perfect shot.\n\nWhen our eyes met, it felt like the world stopped for just a moment. The petals were falling around us like snow, and I remember thinking that this must be what they mean by \"destiny.\"\n\nWe talked for hours that day. About everything and nothing. About dreams and fears, about the places we wanted to go and the people we wanted to become. The sun set and we barely noticed, too caught up in our conversation.\n\nLooking back now, I realize that was the moment the red string of fate tied itself around us. From that day forward, our stories became intertwined, our paths forever connected by something greater than either of us could understand.`;\n\n  return (\n    <div className=\"p-8 bg-gradient-to-b from-kdrama-cream/30 to-kdrama-sky/30 min-h-screen\">\n      <ReadingContent\n        title=\"Under the Cherry Blossoms\"\n        content={mockContent}\n        mood=\"Romantic\"\n        tags={[\"spring\", \"destiny\", \"first-meeting\"]}\n        editedAt={new Date(\"2024-03-15T14:30:00\")}\n      />\n    </div>\n  );\n}\n","size_bytes":1543},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/reader.tsx":{"content":"import { useState } from \"react\";\nimport { ThreadBar } from \"@/components/ThreadBar\";\nimport { ReadingContent } from \"@/components/ReadingContent\";\nimport { FateLinks } from \"@/components/FateLinks\";\nimport { ChapterNav } from \"@/components/ChapterNav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\n\nexport default function Reader() {\n  const [progress, setProgress] = useState(0.35);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const mockChapters = [\n    { id: \"ch1\", title: \"The Beginning\", emoji: \"🌸\", order: 1, isPublic: true, pageCount: 5 },\n    { id: \"ch2\", title: \"Unexpected Encounters\", emoji: \"☂️\", order: 2, isPublic: true, pageCount: 8 },\n    { id: \"ch3\", title: \"Growing Closer\", emoji: \"💜\", order: 3, isPublic: true, pageCount: 12 },\n  ];\n\n  const mockFateLinks = [\n    {\n      id: \"1\",\n      title: \"Coffee Shop Confessions\",\n      slug: \"coffee-shop\",\n      tags: [\"coffee\", \"confession\", \"sweet\"],\n      mood: \"Sweet\",\n      description: \"Words unspoken finally found their way out...\",\n    },\n    {\n      id: \"2\",\n      title: \"Sunset at Han River\",\n      slug: \"han-river\",\n      tags: [\"sunset\", \"reflection\", \"peaceful\"],\n      mood: \"Peaceful\",\n      description: \"Watching the sun set, we talked about everything and nothing...\",\n    },\n    {\n      id: \"3\",\n      title: \"The Promise\",\n      slug: \"promise\",\n      tags: [\"cherry-blossoms\", \"spring\", \"promise\"],\n      mood: \"Hopeful\",\n      description: \"Under the sakura trees, we made a promise...\",\n    },\n  ];\n\n  const mockContent = `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last days of the cherry blossom season. You were standing under the biggest tree in Yeouido Park, camera in hand, trying to capture the perfect shot.\n\nWhen our eyes met, it felt like the world stopped for just a moment. The petals were falling around us like snow, and I remember thinking that this must be what they mean by \"destiny.\"\n\nWe talked for hours that day. About everything and nothing. About dreams and fears, about the places we wanted to go and the people we wanted to become. The sun set and we barely noticed, too caught up in our conversation.\n\nLooking back now, I realize that was the moment the red string of fate tied itself around us. From that day forward, our stories became intertwined, our paths forever connected by something greater than either of us could understand.\n\nThe days that followed were filled with a kind of magic I'd never experienced before. Every text message made my heart race. Every phone call lasted hours. We discovered shared interests and laughed at inside jokes that only we understood.\n\nIt was like finding a missing piece of myself I didn't know was lost.`;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/30 to-kdrama-sky/20\">\n      <div className=\"sticky top-0 z-50 bg-white/95 dark:bg-background/95 backdrop-blur-sm border-b border-border shadow-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-toggle-sidebar\"\n            >\n              {sidebarOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n            <h2 className=\"font-myeongjo text-xl font-bold text-kdrama-ink dark:text-foreground\">\n              Under the Cherry Blossoms\n            </h2>\n            <div className=\"w-10\" />\n          </div>\n          <ThreadBar\n            progress={progress}\n            paused={false}\n            onMilestone={(m) => console.log(`Milestone: ${m * 100}%`)}\n          />\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-12 relative\">\n        {sidebarOpen && (\n          <div className=\"fixed inset-0 bg-black/50 z-40 md:hidden\" onClick={() => setSidebarOpen(false)} />\n        )}\n        \n        <div className={`fixed top-20 left-0 h-full w-80 bg-white dark:bg-card p-6 shadow-xl z-50 transition-transform duration-300 ${\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        } md:relative md:translate-x-0 md:shadow-none md:bg-transparent`}>\n          <h3 className=\"font-myeongjo text-2xl text-kdrama-ink dark:text-foreground mb-6\">Chapters</h3>\n          <ChapterNav\n            chapters={mockChapters}\n            activeChapterId=\"ch2\"\n            onChapterClick={(id) => console.log(`Navigate to chapter: ${id}`)}\n          />\n        </div>\n\n        <div className=\"md:ml-96\">\n          <ReadingContent\n            title=\"Under the Cherry Blossoms\"\n            content={mockContent}\n            mood=\"Romantic\"\n            tags={[\"spring\", \"destiny\", \"first-meeting\"]}\n            editedAt={new Date(\"2024-03-15T14:30:00\")}\n          />\n\n          <div className=\"mt-16\">\n            <FateLinks\n              currentPageId=\"current\"\n              candidates={mockFateLinks}\n              onNavigate={(slug) => console.log(`Navigate to: ${slug}`)}\n            />\n          </div>\n\n          <div className=\"mt-12 text-center\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setProgress(Math.min(1, progress + 0.1))}\n              className=\"font-noto rounded-2xl\"\n              data-testid=\"button-simulate-scroll\"\n            >\n              Simulate Reading Progress\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5752},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/examples/Knot.tsx":{"content":"import { Knot } from \"../Knot\";\n\nexport default function KnotExample() {\n  return (\n    <div className=\"p-8 bg-kdrama-sky/20 min-h-[200px]\">\n      <div className=\"max-w-2xl mx-auto space-y-8\">\n        <div>\n          <h3 className=\"font-myeongjo text-xl text-kdrama-ink mb-4\">Knot Sizes</h3>\n          <div className=\"flex items-center gap-6\">\n            <Knot size=\"sm\" label=\"Small knot\" />\n            <Knot size=\"md\" label=\"Medium knot\" />\n            <Knot size=\"lg\" label=\"Large knot\" />\n          </div>\n        </div>\n        <div>\n          <h3 className=\"font-myeongjo text-xl text-kdrama-ink mb-4\">Knot Tones</h3>\n          <div className=\"flex items-center gap-6\">\n            <Knot tone=\"primary\" size=\"lg\" label=\"Primary (Thread)\" />\n            <Knot tone=\"gold\" size=\"lg\" label=\"Gold (Lavender)\" />\n            <Knot tone=\"muted\" size=\"lg\" label=\"Muted (Sakura)\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":946},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/AdminToolbar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Edit3,\n  Save,\n  Eye,\n  EyeOff,\n  Calendar,\n  Plus,\n  Trash2,\n  BarChart3,\n} from \"lucide-react\";\n\ninterface AdminToolbarProps {\n  isEditing?: boolean;\n  isPublished?: boolean;\n  onToggleEdit?: () => void;\n  onSave?: () => void;\n  onTogglePublish?: () => void;\n  onSetEditedDate?: () => void;\n  onDelete?: () => void;\n  onViewAnalytics?: () => void;\n}\n\nexport function AdminToolbar({\n  isEditing = false,\n  isPublished = true,\n  onToggleEdit,\n  onSave,\n  onTogglePublish,\n  onSetEditedDate,\n  onDelete,\n  onViewAnalytics,\n}: AdminToolbarProps) {\n  return (\n    <div className=\"sticky top-0 z-50 bg-white/95 dark:bg-background/95 backdrop-blur-sm border-b border-border shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-3\">\n            <Badge variant={isPublished ? \"default\" : \"secondary\"} className=\"font-noto\">\n              {isPublished ? \"Published\" : \"Draft\"}\n            </Badge>\n            <Badge variant=\"outline\" className=\"font-noto text-xs\">\n              Admin Mode\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant={isEditing ? \"default\" : \"outline\"}\n              onClick={onToggleEdit}\n              data-testid=\"button-toggle-edit\"\n            >\n              <Edit3 className=\"w-4 h-4 mr-2\" />\n              {isEditing ? \"Editing\" : \"Edit\"}\n            </Button>\n\n            {isEditing && (\n              <Button\n                size=\"sm\"\n                variant=\"default\"\n                onClick={onSave}\n                data-testid=\"button-save\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save\n              </Button>\n            )}\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onTogglePublish}\n              data-testid=\"button-toggle-publish\"\n            >\n              {isPublished ? (\n                <>\n                  <EyeOff className=\"w-4 h-4 mr-2\" />\n                  Unpublish\n                </>\n              ) : (\n                <>\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  Publish\n                </>\n              )}\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onSetEditedDate}\n              data-testid=\"button-set-date\"\n            >\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Set Date\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onViewAnalytics}\n              data-testid=\"button-analytics\"\n            >\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Analytics\n            </Button>\n\n            <div className=\"w-px h-6 bg-border\" />\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onDelete}\n              data-testid=\"button-delete\"\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3338},"client/src/components/FateLinks.tsx":{"content":"import { PolaroidCard } from \"./PolaroidCard\";\n\ninterface PageCandidate {\n  id: string;\n  title: string;\n  slug: string;\n  tags: string[];\n  mood?: string;\n  coverUrl?: string;\n  description?: string;\n}\n\ninterface FateLinksProps {\n  currentPageId: string;\n  candidates?: PageCandidate[];\n  maxLinks?: number;\n  onNavigate?: (slug: string) => void;\n}\n\nexport function FateLinks({\n  candidates = [],\n  maxLinks = 3,\n  onNavigate,\n}: FateLinksProps) {\n  const displayedCandidates = candidates.slice(0, maxLinks);\n\n  if (displayedCandidates.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"relative py-12\">\n      <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-kdrama-thread to-transparent\" />\n      \n      <div className=\"text-center mb-8\">\n        <h2 className=\"font-myeongjo text-3xl text-kdrama-ink dark:text-foreground mb-2\">\n          The Thread Continues...\n        </h2>\n        <p className=\"font-noto text-muted-foreground\">\n          Follow the red string to your next chapter\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 relative\">\n        <svg\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ zIndex: 0 }}\n        >\n          {displayedCandidates.map((_, index) => {\n            const startX = 50;\n            const startY = 0;\n            const endX = (index + 0.5) * (100 / displayedCandidates.length);\n            const endY = 100;\n            const controlY = 50;\n\n            return (\n              <path\n                key={index}\n                d={`M ${startX} ${startY} Q ${endX} ${controlY} ${endX} ${endY}`}\n                stroke=\"#D7263D\"\n                strokeWidth=\"2\"\n                fill=\"none\"\n                opacity=\"0.3\"\n                strokeDasharray=\"4 4\"\n              />\n            );\n          })}\n        </svg>\n\n        {displayedCandidates.map((candidate) => (\n          <div key={candidate.id} className=\"relative z-10\">\n            <PolaroidCard\n              title={candidate.title}\n              coverUrl={candidate.coverUrl}\n              mood={candidate.mood}\n              tags={candidate.tags}\n              description={candidate.description}\n              onClick={() => onNavigate?.(candidate.slug)}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2374},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Book, Heart, LogIn, LogOut, Play } from \"lucide-react\";\nimport { Knot } from \"@/components/Knot\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { Chapter, ReadingProgress } from \"@shared/schema\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { user, logout, isAuthenticated } = useAuth();\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const { data: lastRead } = useQuery<ReadingProgress | null>({\n    queryKey: [`/api/reading-progress/last?userId=${user?.id || ''}`],\n    enabled: !!user,\n  });\n\n  const handleLogin = () => {\n    setLocation(\"/login\");\n  };\n\n  const handleAdmin = () => {\n    setLocation(\"/admin\");\n  };\n\n  const handleResume = () => {\n    if (lastRead?.sectionId) {\n      setLocation(`/read/${lastRead.sectionId}`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/40 via-kdrama-sakura/20 to-kdrama-lavender/20\">\n      <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-kdrama-thread via-kdrama-sakura to-kdrama-lavender\" />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex justify-end mb-4\">\n          {isAuthenticated ? (\n            <div className=\"flex items-center gap-3\">\n              <span className=\"font-noto text-sm text-muted-foreground\">\n                {user?.username}\n              </span>\n              {user?.role === \"admin\" && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleAdmin}\n                  data-testid=\"button-admin\"\n                >\n                  Admin\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={logout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          ) : (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogin}\n              data-testid=\"button-login-header\"\n            >\n              <LogIn className=\"w-4 h-4 mr-2\" />\n              Login\n            </Button>\n          )}\n        </div>\n\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center gap-3 mb-6\">\n            <Knot size=\"lg\" tone=\"primary\" />\n            <h1 className=\"font-myeongjo text-5xl md:text-7xl font-bold text-kdrama-ink dark:text-foreground\">\n              紅線日記\n            </h1>\n            <Knot size=\"lg\" tone=\"gold\" />\n          </div>\n          \n          <p className=\"font-noto text-xl text-muted-foreground max-w-2xl mx-auto mb-6\">\n            Red String of Fate Journal\n          </p>\n\n          {lastRead && (\n            <Button\n              size=\"lg\"\n              onClick={handleResume}\n              className=\"font-noto rounded-2xl\"\n              data-testid=\"button-resume\"\n            >\n              <Play className=\"w-5 h-5 mr-2\" />\n              Resume Reading\n            </Button>\n          )}\n        </div>\n\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"font-myeongjo text-3xl font-bold text-kdrama-ink dark:text-foreground\">\n              Chapters\n            </h2>\n            <Badge variant=\"secondary\" className=\"font-noto\">\n              {chapters.length} {chapters.length === 1 ? \"Chapter\" : \"Chapters\"}\n            </Badge>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {chapters.map((chapter) => (\n              <Card\n                key={chapter.id}\n                className=\"cursor-pointer bg-white/80 dark:bg-card/80 backdrop-blur-sm rounded-2xl border-0 shadow-lg hover:shadow-xl transition-all duration-180 hover:-translate-y-1 overflow-hidden\"\n                onClick={() => setLocation(`/chapter/${chapter.id}`)}\n                data-testid={`card-chapter-${chapter.id}`}\n              >\n                {chapter.coverImage ? (\n                  <div className=\"h-48 w-full overflow-hidden\">\n                    <img\n                      src={chapter.coverImage}\n                      alt={chapter.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"h-48 w-full bg-gradient-to-br from-kdrama-sakura/30 via-kdrama-lavender/30 to-kdrama-sky/30 flex items-center justify-center\">\n                    <Book className=\"w-16 h-16 text-kdrama-thread/30\" />\n                  </div>\n                )}\n                \n                <CardHeader>\n                  <CardTitle className=\"font-myeongjo text-2xl text-kdrama-ink dark:text-foreground\">\n                    {chapter.title}\n                  </CardTitle>\n                  {chapter.description && (\n                    <CardDescription className=\"font-noto\">\n                      {chapter.description}\n                    </CardDescription>\n                  )}\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n\n          {chapters.length === 0 && (\n            <div className=\"text-center py-16\">\n              <Heart className=\"w-16 h-16 mx-auto mb-4 text-kdrama-thread/30\" />\n              <p className=\"font-noto text-lg text-muted-foreground\">\n                No chapters yet. The journey awaits...\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5975},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"replit.md":{"content":"# K-Drama Journal\n\n## Overview\n\nA colorful, journal-style web application inspired by K-Drama aesthetics, featuring the \"Red String of Fate\" visual motif. The application enables users to read beautifully formatted journal entries organized into chapters and sections, with reading progress tracking and analytics. Admin users can manage content through inline editing capabilities.\n\nThe application serves two primary user roles: Readers who consume content with tracked progress, and Admins who create and manage chapters, sections, and pages with detailed analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool and development server.\n\n**Routing**: Client-side routing implemented with Wouter, a lightweight routing solution.\n\n**State Management**: \n- TanStack Query (React Query) for server state management and API data fetching\n- React Context API for authentication state (AuthContext)\n- Local component state with React hooks\n\n**UI Component System**: \n- Radix UI primitives for accessible, headless components\n- Custom component library built on shadcn/ui design system\n- Tailwind CSS for styling with custom K-Drama themed color palette\n- Custom fonts: Nanum Myeongjo (headings), Noto Sans KR (body text)\n\n**Key Design Patterns**:\n- Component composition with reusable UI elements (Knot, ThreadBar, PolaroidCard, etc.)\n- Separation of concerns between presentational and container components\n- Custom hooks for cross-cutting concerns (useAuth, useToast, useIsMobile)\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript running on Node.js\n\n**API Design**: RESTful API structure with route organization:\n- `/api/auth/*` - Authentication endpoints\n- `/api/chapters/*` - Chapter CRUD operations\n- `/api/sections/*` - Section management\n- `/api/pages/*` - Page content operations  \n- `/api/reading-progress/*` - User reading analytics\n\n**Data Access Layer**: Storage abstraction pattern through `IStorage` interface providing:\n- Database operations encapsulation\n- Consistent API for data access\n- Separation between business logic and data persistence\n\n**Server-Side Rendering**: Vite middleware integration for development with custom HTML template serving\n\n### Data Storage\n\n**Database**: PostgreSQL accessed through Neon serverless driver\n\n**ORM**: Drizzle ORM for type-safe database queries and schema management\n\n**Schema Design**:\n- `users` - User accounts with role-based access (admin/reader/guest)\n- `chapters` - Top-level content organization with ordering\n- `sections` - Sub-divisions within chapters with metadata (mood, tags, thumbnails)\n- `pages` - Individual content pages within sections\n- `readingProgress` - Tracks user reading behavior and completion status\n\n**Migration Strategy**: Drizzle Kit for schema migrations with PostgreSQL dialect\n\n### Authentication & Authorization\n\n**Authentication**: Simple username/password authentication with session storage in localStorage\n\n**Authorization**: Role-based access control (RBAC) with three roles:\n- `guest` - Read-only access to public content\n- `reader` - Authenticated read access with progress tracking\n- `admin` - Full content management and analytics access\n\n**Session Management**: Client-side session persistence with JSON serialization in localStorage\n\n### External Dependencies\n\n**Database Service**: Neon PostgreSQL serverless database\n- WebSocket-based connection pooling\n- Connection string via `DATABASE_URL` environment variable\n\n**UI Libraries**:\n- Radix UI component primitives (dialogs, dropdowns, tooltips, etc.)\n- Embla Carousel for carousel functionality\n- Lucide React for icon system\n- class-variance-authority and clsx for dynamic class composition\n\n**Development Tools**:\n- Replit-specific plugins for development banner and cartographer\n- Runtime error overlay for debugging\n\n**Build & Deployment**:\n- esbuild for production server bundling\n- Vite for client-side bundling and optimization\n- ESM module format throughout\n\n**Typography**:\n- Google Fonts integration for Nanum Myeongjo and Noto Sans KR\n- Preconnect optimization for font loading\n\n### Key Architectural Decisions\n\n**Monorepo Structure**: Shared schema definitions between client and server via `@shared` path alias, enabling type safety across the full stack.\n\n**Session Strategy**: Client-side session management was chosen over server-side sessions for simplicity, though this limits security for sensitive operations. The guest role enables unauthenticated reading with optional progress tracking.\n\n**Data Model Hierarchy**: Three-level content organization (Chapter → Section → Page) provides flexibility for content structuring while maintaining clear navigation paths.\n\n**Reading Analytics**: Progress tracking uses both page-level and section-level granularity, recording completion milestones at 25%, 50%, 75%, and 100% for detailed engagement metrics.\n\n**Component Design**: Heavy use of composition over inheritance with small, focused components following the K-Drama design system guidelines for consistent aesthetics.\n\n**Build Optimization**: Separate build processes for client (Vite) and server (esbuild) with external package bundling for the server to reduce bundle size.","size_bytes":5326},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/examples/ThreadBar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ThreadBar } from \"../ThreadBar\";\n\nexport default function ThreadBarExample() {\n  const [progress, setProgress] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!paused) {\n        setProgress((prev) => (prev >= 1 ? 0 : prev + 0.01));\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [paused]);\n\n  return (\n    <div className=\"p-8 bg-kdrama-cream/30 min-h-[200px]\">\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink\">Thread Progress</h3>\n        <ThreadBar\n          progress={progress}\n          paused={paused}\n          showLabels={true}\n          onMilestone={(m) => console.log(`Milestone reached: ${m * 100}%`)}\n        />\n        <button\n          onClick={() => setPaused(!paused)}\n          className=\"px-4 py-2 bg-kdrama-thread text-white rounded-2xl hover-elevate active-elevate-2\"\n          data-testid=\"button-toggle-pause\"\n        >\n          {paused ? \"Resume\" : \"Pause\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1156},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"design_guidelines.md":{"content":"# K-Drama Journal Design Guidelines\n\n## Design Philosophy\nA colorful, bubbly journal experience inspired by K-Drama aesthetics with the signature **Red String of Fate** motif visually connecting chapters, pages, and reader journeys.\n\n## Color Palette\n\n### Primary Colors\n- **Sakura Pink**: #FFB7C5 (romantic, soft accent)\n- **Lavender**: #B8A2FF (dreamy, secondary accent)\n- **Sky Blue**: #CDE7F0 (calming backgrounds)\n- **Cream**: #FFF7DA (warm content backgrounds)\n- **Ink**: #2D2A32 (primary text)\n\n### Red String System\n- **Thread Red**: #D7263D (signature connecting element)\n- **Knot Shadow Dark**: #A40E2D (depth)\n- **Knot Shadow Light**: #F25F5C (highlights)\n\n## Typography\n\n### Font Families\n- **Headings/Titles**: Nanum Myeongjo (Korean serif, elegant)\n- **Body Text**: Noto Sans KR (Korean sans-serif, readable)\n\n### Scale & Hierarchy\n- Page titles: Large, Nanum Myeongjo, with emoji support\n- Chapter headings: Medium-large, Nanum Myeongjo\n- Body content: Comfortable reading size, Noto Sans KR\n- Labels/UI: Small, Noto Sans KR\n\n## Layout System\n\n### Spacing\nUse Tailwind spacing units: 2, 4, 6, 8, 12, 16, 24 for consistent rhythm\n\n### Corners & Depth\n- Border radius: `rounded-2xl` for cards, containers, and media embeds\n- Shadows: Soft, diffused (blur: 24px, spread: 0, opacity: 12-16%)\n- Layering: Thread elements beneath content, knots float above\n\n### Content Structure\n- Clean margins with generous whitespace\n- Content max-width for optimal reading (prose-lg equivalent)\n- Responsive polaroid-style cards for suggestions\n\n## Red String of Fate Motif\n\n### ThreadBar Component\n- Thin red line (#D7263D) running horizontally at page top\n- Progress indicator fills left-to-right as user scrolls\n- **Knots** (small hearts) appear at 25%, 50%, 75%, 100% milestones\n- **Active state**: Taut, full opacity thread\n- **Paused state**: Slight sag, reduced opacity (60-70%)\n- Smooth transitions (120-180ms ease-in-out)\n\n### Visual Thread Elements\n- Sidebar: Thin vertical red thread with decorative knots\n- Page headers: Thread weaves through title area\n- Chapter breaks: Knot nodes marking transitions\n- FateLinks: Curved threads connecting current page to suggestions\n\n### Knot Styling\n- Heart-shaped nodes in red (#D7263D)\n- Subtle pulse animation on hover (scale 1.05, 180ms)\n- Shadow depth using knot shadow colors\n- Sizes: sm (12px), md (16px), lg (24px)\n\n## Component Styling\n\n### Cards & Containers\n- Polaroid aesthetic: white/cream background, slight rotation (-2° to 2°)\n- Pinned appearance with small thread loop at top\n- Gentle sway on hover (1-2° rotation, 180ms)\n- Rounded corners (rounded-2xl)\n- Soft shadow for depth\n\n### Embeds (Instagram/Spotify)\n- Responsive wrapper maintaining aspect ratio\n- Rounded corners matching theme\n- Subtle border or shadow\n- Loading states with skeleton screens in theme colors\n\n### Buttons & Interactive Elements\n- Primary: Sakura pink fill with white text\n- Secondary: Outline style with lavender border\n- Hover states: Slight scale (1.02) and deeper shadow\n- Focus: High-contrast outline for accessibility\n\n### Editor Tools (Admin Only)\n- Floating toolbar with cream background\n- Pill-shaped buttons with icons\n- Slash menu with K-drama themed icons\n- Drag handles styled as small thread loops\n\n## Iconography & Decorative Elements\n- **Icons**: Hearts, umbrellas, polaroids, flower petals\n- Use sparingly for visual interest without clutter\n- Integrate thread motif into navigation and dividers\n- Chapter emojis displayed prominently\n\n## Motion & Animation\n\n### Principles\n- Timing: 120-180ms for micro-interactions\n- Easing: ease-in-out for natural feel\n- **Respect `prefers-reduced-motion`**: Replace animations with simple fades or static states\n\n### Key Animations\n- Thread progress: Smooth width transition\n- Knot milestones: Subtle pop-in (scale from 0 to 1)\n- Polaroid sway: Gentle rotation on hover\n- Page transitions: Soft fade (no dramatic movements)\n- Heartbeat pulse: Subtle scale for active tracking indicator\n\n## Reading Experience\n\n### Content Presentation\n- Comfortable line height (1.7-1.8)\n- Optimal line length (65-75 characters)\n- Clear paragraph spacing\n- Thread markers at 25/50/75/100% invisible to readers\n\n### FateLinks Section\n- 1-3 polaroid cards showing suggested pages\n- Red thread curves connecting current page to each\n- Card includes: cover image, title, mood tag, brief description\n- Hover reveals full description tooltip\n\n## Admin Dashboard Aesthetics\n- **Timeline view**: Horizontal thread with knots representing page views\n- **Journey map**: Circular chapter layout with thread tracing reading path\n- **KPI cards**: Soft backgrounds (sky/lavender/cream) with ink text\n- Data visualizations use theme color palette\n\n## Accessibility Requirements\n- Color contrast: Ensure WCAG AA minimum (4.5:1 for text)\n- Focus indicators: High-contrast outlines on all interactive elements\n- Thread/knot elements have appropriate ARIA labels\n- Keyboard navigation for all functionality\n- Screen reader friendly milestone announcements\n\n## Images\n- **Hero Section**: Not applicable - this is a journal/reading interface, not a marketing site\n- **Page Covers**: Optional cover images for individual pages (landscape, 16:9 recommended)\n- **Polaroid Cards**: Thumbnail images for page suggestions (square or portrait, 4:5)\n- **Background Patterns**: Subtle, theme-colored decorative elements (petals, threads) at very low opacity (5-8%)","size_bytes":5416},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Chapter,\n  type InsertChapter,\n  type Section,\n  type InsertSection,\n  type Page,\n  type InsertPage,\n  type ReadingProgress,\n  type InsertReadingProgress,\n  users,\n  chapters,\n  sections,\n  pages,\n  readingProgress,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Chapter methods\n  getChapters(): Promise<Chapter[]>;\n  getChapter(id: string): Promise<Chapter | undefined>;\n  createChapter(chapter: InsertChapter): Promise<Chapter>;\n  updateChapter(id: string, chapter: Partial<InsertChapter>): Promise<Chapter | undefined>;\n  deleteChapter(id: string): Promise<void>;\n  \n  // Section methods\n  getSectionsByChapter(chapterId: string): Promise<Section[]>;\n  getSection(id: string): Promise<Section | undefined>;\n  createSection(section: InsertSection): Promise<Section>;\n  updateSection(id: string, section: Partial<InsertSection>): Promise<Section | undefined>;\n  deleteSection(id: string): Promise<void>;\n  \n  // Page methods\n  getPagesBySection(sectionId: string): Promise<Page[]>;\n  getPage(id: string): Promise<Page | undefined>;\n  createPage(page: InsertPage): Promise<Page>;\n  updatePage(id: string, page: Partial<InsertPage>): Promise<Page | undefined>;\n  deletePage(id: string): Promise<void>;\n  \n  // Reading progress methods\n  getReadingProgress(userId: string | null, sectionId: string): Promise<ReadingProgress | undefined>;\n  getUserReadingProgress(userId: string | null): Promise<ReadingProgress[]>;\n  upsertReadingProgress(progress: InsertReadingProgress): Promise<ReadingProgress>;\n  getLastReadSection(userId: string | null): Promise<ReadingProgress | undefined>;\n}\n\nexport class DBStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Chapter methods\n  async getChapters(): Promise<Chapter[]> {\n    return db.select().from(chapters).orderBy(chapters.order);\n  }\n\n  async getChapter(id: string): Promise<Chapter | undefined> {\n    const result = await db.select().from(chapters).where(eq(chapters.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createChapter(chapter: InsertChapter): Promise<Chapter> {\n    const result = await db.insert(chapters).values(chapter).returning();\n    return result[0];\n  }\n\n  async updateChapter(id: string, chapter: Partial<InsertChapter>): Promise<Chapter | undefined> {\n    const result = await db.update(chapters).set(chapter).where(eq(chapters.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteChapter(id: string): Promise<void> {\n    await db.delete(chapters).where(eq(chapters.id, id));\n  }\n\n  // Section methods\n  async getSectionsByChapter(chapterId: string): Promise<Section[]> {\n    return db.select().from(sections).where(eq(sections.chapterId, chapterId)).orderBy(sections.order);\n  }\n\n  async getSection(id: string): Promise<Section | undefined> {\n    const result = await db.select().from(sections).where(eq(sections.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createSection(section: InsertSection): Promise<Section> {\n    const result = await db.insert(sections).values(section).returning();\n    return result[0];\n  }\n\n  async updateSection(id: string, section: Partial<InsertSection>): Promise<Section | undefined> {\n    const result = await db.update(sections).set(section).where(eq(sections.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteSection(id: string): Promise<void> {\n    await db.delete(sections).where(eq(sections.id, id));\n  }\n\n  // Page methods\n  async getPagesBySection(sectionId: string): Promise<Page[]> {\n    return db.select().from(pages).where(eq(pages.sectionId, sectionId)).orderBy(pages.pageNumber);\n  }\n\n  async getPage(id: string): Promise<Page | undefined> {\n    const result = await db.select().from(pages).where(eq(pages.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPage(page: InsertPage): Promise<Page> {\n    const result = await db.insert(pages).values(page).returning();\n    return result[0];\n  }\n\n  async updatePage(id: string, page: Partial<InsertPage>): Promise<Page | undefined> {\n    const result = await db.update(pages).set(page).where(eq(pages.id, id)).returning();\n    return result[0];\n  }\n\n  async deletePage(id: string): Promise<void> {\n    await db.delete(pages).where(eq(pages.id, id));\n  }\n\n  // Reading progress methods\n  async getReadingProgress(userId: string | null, sectionId: string): Promise<ReadingProgress | undefined> {\n    const condition = userId \n      ? and(eq(readingProgress.userId, userId), eq(readingProgress.sectionId, sectionId))\n      : and(isNull(readingProgress.userId), eq(readingProgress.sectionId, sectionId));\n    \n    const result = await db.select().from(readingProgress).where(condition).limit(1);\n    return result[0];\n  }\n\n  async getUserReadingProgress(userId: string | null): Promise<ReadingProgress[]> {\n    const condition = userId ? eq(readingProgress.userId, userId) : isNull(readingProgress.userId);\n    return db.select().from(readingProgress).where(condition).orderBy(desc(readingProgress.lastReadAt));\n  }\n\n  async upsertReadingProgress(progress: InsertReadingProgress): Promise<ReadingProgress> {\n    const existing = await this.getReadingProgress(progress.userId || null, progress.sectionId);\n    \n    if (existing) {\n      const result = await db\n        .update(readingProgress)\n        .set({ ...progress, lastReadAt: new Date() })\n        .where(eq(readingProgress.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(readingProgress).values(progress).returning();\n      return result[0];\n    }\n  }\n\n  async getLastReadSection(userId: string | null): Promise<ReadingProgress | undefined> {\n    const condition = userId ? eq(readingProgress.userId, userId) : isNull(readingProgress.userId);\n    const result = await db\n      .select()\n      .from(readingProgress)\n      .where(condition)\n      .orderBy(desc(readingProgress.lastReadAt))\n      .limit(1);\n    return result[0];\n  }\n}\n\nexport const storage = new DBStorage();\n","size_bytes":6747},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n        \"2xl\": \"1rem\", /* 16px for K-Drama cards */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        kdrama: {\n          sakura: \"#FFB7C5\",\n          lavender: \"#B8A2FF\",\n          sky: \"#CDE7F0\",\n          cream: \"#FFF7DA\",\n          ink: \"#2D2A32\",\n          thread: \"#D7263D\",\n          \"knot-dark\": \"#A40E2D\",\n          \"knot-light\": \"#F25F5C\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        myeongjo: [\"Nanum Myeongjo\", \"serif\"],\n        noto: [\"Noto Sans KR\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"pulse-gentle\": {\n          \"0%, 100%\": { transform: \"scale(1)\", opacity: \"1\" },\n          \"50%\": { transform: \"scale(1.05)\", opacity: \"0.9\" },\n        },\n        \"sway\": {\n          \"0%, 100%\": { transform: \"rotate(-1deg)\" },\n          \"50%\": { transform: \"rotate(1deg)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-gentle\": \"pulse-gentle 2s ease-in-out infinite\",\n        \"sway\": \"sway 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4868},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\nexport type UserRole = \"admin\" | \"reader\" | \"guest\";\n\ninterface AuthUser {\n  id: string;\n  username: string;\n  role: UserRole;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isAdmin: boolean;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"kdrama-journal-user\");\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (e) {\n        localStorage.removeItem(\"kdrama-journal-user\");\n      }\n    }\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const authUser = await response.json();\n        setUser(authUser);\n        localStorage.setItem(\"kdrama-journal-user\", JSON.stringify(authUser));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"kdrama-journal-user\");\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        login,\n        logout,\n        isAdmin: user?.role === \"admin\",\n        isAuthenticated: Boolean(user),\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2039},"client/src/components/ReadingContent.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Calendar, Clock } from \"lucide-react\";\nimport { Knot } from \"./Knot\";\n\ninterface ReadingContentProps {\n  title: string;\n  content: string;\n  mood?: string;\n  tags?: string[];\n  editedAt?: Date;\n  coverUrl?: string;\n  showMilestones?: boolean;\n}\n\nexport function ReadingContent({\n  title,\n  content,\n  mood,\n  tags = [],\n  editedAt,\n  coverUrl,\n  showMilestones = true,\n}: ReadingContentProps) {\n  const paragraphs = content.split(\"\\n\\n\").filter((p) => p.trim());\n\n  return (\n    <div className=\"max-w-3xl mx-auto\">\n      <div className=\"mb-8\">\n        {coverUrl && (\n          <div className=\"relative mb-6 rounded-2xl overflow-hidden shadow-lg\">\n            <img src={coverUrl} alt={title} className=\"w-full h-64 object-cover\" />\n            <div className=\"absolute top-4 left-4\">\n              <Knot size=\"lg\" tone=\"primary\" />\n            </div>\n          </div>\n        )}\n        \n        <h1 className=\"font-myeongjo text-4xl md:text-5xl font-bold text-kdrama-ink dark:text-foreground mb-4\">\n          {title}\n        </h1>\n\n        <div className=\"flex flex-wrap items-center gap-3 mb-6\">\n          {mood && (\n            <Badge variant=\"secondary\" className=\"font-noto\">\n              {mood}\n            </Badge>\n          )}\n          {tags.map((tag) => (\n            <Badge key={tag} variant=\"outline\" className=\"font-noto\">\n              #{tag}\n            </Badge>\n          ))}\n        </div>\n\n        {editedAt && (\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground font-noto\">\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>{editedAt.toLocaleDateString()}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-4 h-4\" />\n              <span>{editedAt.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Card className=\"p-8 md:p-12 bg-white/80 dark:bg-card/80 backdrop-blur-sm border-0 shadow-md\">\n        <div className=\"prose prose-lg max-w-none font-noto\">\n          {paragraphs.map((paragraph, index) => (\n            <div key={index} className=\"relative\">\n              {showMilestones && index === Math.floor(paragraphs.length * 0.25) && (\n                <div\n                  className=\"absolute -left-8 top-0\"\n                  data-milestone=\"25\"\n                  aria-label=\"25% reading progress marker\"\n                >\n                  <Knot size=\"sm\" tone=\"muted\" />\n                </div>\n              )}\n              {showMilestones && index === Math.floor(paragraphs.length * 0.5) && (\n                <div\n                  className=\"absolute -left-8 top-0\"\n                  data-milestone=\"50\"\n                  aria-label=\"50% reading progress marker\"\n                >\n                  <Knot size=\"sm\" tone=\"muted\" />\n                </div>\n              )}\n              {showMilestones && index === Math.floor(paragraphs.length * 0.75) && (\n                <div\n                  className=\"absolute -left-8 top-0\"\n                  data-milestone=\"75\"\n                  aria-label=\"75% reading progress marker\"\n                >\n                  <Knot size=\"sm\" tone=\"muted\" />\n                </div>\n              )}\n              <p className=\"mb-6 leading-relaxed text-kdrama-ink dark:text-foreground\">\n                {paragraph}\n              </p>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3633},"README.md":{"content":"# K-Drama Journal\n\nA colorful, journal-style web application inspired by K-Drama aesthetics, featuring the \"Red String of Fate\" visual motif. The application enables users to read beautifully formatted journal entries organized into chapters and sections, with reading progress tracking and analytics.\n\n## Features\n\n- 📖 **Beautiful Reading Experience**: Elegantly designed journal entries with K-Drama inspired aesthetics\n- 🎨 **Custom Theming**: Unique color palette featuring sakura pink, lavender, and traditional Korean design elements\n- 📊 **Progress Tracking**: Track your reading progress across chapters and sections\n- 🔐 **Authentication System**: Secure login with role-based access (Admin, Reader)\n- 🖼️ **Embedded Media**: Support for embedded images and Instagram content within journal pages\n- 📱 **Responsive Design**: Works beautifully on desktop and mobile devices\n- 👨‍💼 **Admin Tools**: Content management with inline editing capabilities for admin users\n\n## Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development and building\n- **Wouter** for lightweight routing\n- **TanStack Query** for server state management\n- **Radix UI** for accessible component primitives\n- **Tailwind CSS** for styling\n- **Shadcn/ui** component library\n\n### Backend\n- **Node.js** with TypeScript\n- **Express.js** for API server\n- **PostgreSQL** database (Neon serverless)\n- **Drizzle ORM** for type-safe database queries\n- **Passport.js** for authentication\n\n## Prerequisites\n\nBefore you begin, ensure you have the following installed:\n- **Node.js** (version 20 or higher)\n- **npm** (comes with Node.js)\n- **PostgreSQL** database (or access to a Neon database)\n\n## Getting Started\n\n### 1. Clone the Repository\n\n```bash\ngit clone <your-repo-url>\ncd kdrama-journal\n```\n\n### 2. Install Dependencies\n\n```bash\nnpm install\n```\n\nThis will install all required packages for both the frontend and backend.\n\n### 3. Set Up Environment Variables\n\nCreate a `.env` file in the root directory (if not already present) and add your database connection string:\n\n```env\nDATABASE_URL=postgresql://user:password@host:port/database\n```\n\n**For Replit Users:**\nIf you're running this on Replit, the database is automatically provisioned and the `DATABASE_URL` environment variable is already set. You can skip this step.\n\n### 4. Initialize the Database\n\nPush the database schema to your PostgreSQL database:\n\n```bash\nnpm run db:push\n```\n\nThis command uses Drizzle Kit to create all necessary tables in your database.\n\n### 5. Seed Sample Data\n\nPopulate the database with sample K-Drama journal entries:\n\n```bash\nnpx tsx server/seed.ts\n```\n\nThis will create:\n- 2 user accounts (admin and reader)\n- 5 chapters covering different seasons\n- 7 sections with various moods and themes\n- Multiple pages with embedded images\n- Beautiful K-Drama inspired content\n\n### 6. Start the Development Server\n\n```bash\nnpm run dev\n```\n\nThe application will start on `http://localhost:5000` (or your Replit URL if using Replit).\n\n## Default Login Credentials\n\nAfter seeding the database, you can log in with these accounts:\n\n### Admin Account\n- **Username:** `admin`\n- **Password:** `admin123`\n- **Capabilities:** Full access to content management, analytics, and admin tools\n\n### Reader Account\n- **Username:** `reader`\n- **Password:** `reader123`\n- **Capabilities:** Read access to all content with progress tracking\n\n## Project Structure\n\n```\nkdrama-journal/\n├── client/                 # Frontend React application\n│   ├── public/            # Static assets\n│   └── src/\n│       ├── components/    # React components\n│       │   ├── ui/       # Reusable UI components\n│       │   └── ...       # Feature-specific components\n│       ├── contexts/      # React context providers\n│       ├── hooks/         # Custom React hooks\n│       ├── lib/          # Utility functions and clients\n│       ├── pages/        # Page components (routes)\n│       └── App.tsx       # Main application component\n├── server/                # Backend Express application\n│   ├── db.ts            # Database connection\n│   ├── index.ts         # Server entry point\n│   ├── routes.ts        # API routes\n│   ├── seed.ts          # Database seeding script\n│   ├── storage.ts       # Data access layer\n│   └── vite.ts          # Vite development middleware\n├── shared/               # Shared code between client and server\n│   └── schema.ts        # Database schema and types\n├── package.json         # Dependencies and scripts\n├── drizzle.config.ts   # Drizzle ORM configuration\n├── vite.config.ts      # Vite configuration\n├── tailwind.config.ts  # Tailwind CSS configuration\n└── tsconfig.json       # TypeScript configuration\n```\n\n## Available Scripts\n\n### Development\n- `npm run dev` - Start the development server with hot reload\n- `npm run check` - Run TypeScript type checking\n\n### Database\n- `npm run db:push` - Push database schema changes to the database\n- `npx tsx server/seed.ts` - Seed the database with sample data\n\n### Production\n- `npm run build` - Build the application for production\n- `npm start` - Start the production server\n\n## Database Schema\n\nThe application uses five main tables:\n\n### Users\n- Stores user accounts with role-based access control\n- Roles: `admin`, `reader`, `guest`\n\n### Chapters\n- Top-level content organization\n- Each chapter has a title, description, and order\n\n### Sections\n- Sub-divisions within chapters\n- Contains mood, tags, thumbnail, and order\n\n### Pages\n- Individual content pages within sections\n- Supports embedded content via `[embed:URL]` syntax\n\n### Reading Progress\n- Tracks user reading behavior\n- Records completion status and last read timestamp\n\n## Embedded Content\n\nThe application supports embedded content in journal pages using the following syntax:\n\n### Images\n```\n[embed:https://example.com/image.jpg]\n```\n\n### Instagram Reels/Posts\n```\n[embed:https://www.instagram.com/p/POST_ID]\n```\n\nThe content renderer will automatically detect and display these embeds appropriately.\n\n## Customization\n\n### Changing Colors\nThe color theme is defined in `tailwind.config.ts`. You can customize the K-Drama color palette:\n\n```typescript\ncolors: {\n  kdrama: {\n    thread: \"#DC143C\",\n    sakura: \"#FFB7C5\",\n    lavender: \"#E6E6FA\",\n    // ... more colors\n  }\n}\n```\n\n### Adding New Fonts\nFonts are loaded from Google Fonts in `client/index.html`. The application uses:\n- **Nanum Myeongjo** for headings\n- **Noto Sans KR** for body text\n\n## Troubleshooting\n\n### Database Connection Issues\n- Ensure your `DATABASE_URL` is correctly set in the environment variables\n- Check that your PostgreSQL database is running and accessible\n- Run `npm run db:push` to ensure the schema is up to date\n\n### Port Already in Use\nIf port 5000 is already in use, you can change it in `server/index.ts`:\n```typescript\nconst PORT = process.env.PORT || 5000;\n```\n\n### Build Errors\n- Clear `node_modules` and reinstall: `rm -rf node_modules && npm install`\n- Clear the build cache: `rm -rf dist`\n\n## Contributing\n\nThis is a personal project, but suggestions and improvements are welcome!\n\n## License\n\nMIT License - See LICENSE file for details\n\n## Acknowledgments\n\n- Inspired by K-Drama aesthetics and the Red String of Fate legend\n- Built with love using modern web technologies\n- Korean typography powered by Google Fonts\n\n---\n\n**Enjoy your K-Drama Journal experience! 🎭❤️**\n","size_bytes":7582},"client/src/components/PrivateRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface PrivateRouteProps {\n  component: React.ComponentType<any>;\n  adminOnly?: boolean;\n  params?: any;\n}\n\nexport function PrivateRoute({ component: Component, adminOnly = false, params, ...rest }: PrivateRouteProps) {\n  const [, setLocation] = useLocation();\n  const { user, isAdmin, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n    } else if (adminOnly && !isAdmin) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isAdmin, adminOnly, setLocation]);\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (adminOnly && !isAdmin) {\n    return null;\n  }\n\n  return <Component params={params} {...rest} />;\n}\n","size_bytes":804}},"version":2}